#!/bin/env bash

if ! pkg_installed sddm; then exit 0; fi

sddm_bak=/etc/sddm.conf.d/kde_settings.t2.bkp
export sddm_conf=/etc/sddm.conf.d/kde_settings.conf
sddm_theme_dir="/usr/share/sddm/themes"

sddm_set() {
    [ -z "${sddm_theme}" ] && print_prompt -r "Operation Cancelled" && return 1
    print_prompt -y "Setting into '${sddm_theme} theme'..."
    ask_confirm "${USER}"
    [ -f "${sddm_bak}" ] && SUPER rm "${sddm_bak}"
    [[ -d "$(dirname ${sddm_conf})" ]] || SUPER mkdir -p "$(dirname ${sddm_conf})"
    SUPER tar -xzf ${CloneDir}/Source/arcs/Sddm_${sddm_theme}.tar.gz -C "${sddm_theme_dir}/${theme}"
    SUPER touch "${sddm_conf}"
    SUPER cp "${sddm_conf}" "${sddm_bak}"
    SUPER cp ${sddm_theme_dir}/${sddm_theme}/kde_settings.conf "$(dirname ${sddm_conf})"
    enable_service sddm

}

sddm_list_arcs() {
    export sddm_theme=$(
        find "${CloneDir}/Source/arcs" -type f -name "*Sddm_*" -printf "%f\n" |
            awk -F 'Sddm_' '{print $2}' |
            awk -F '.tar' '{print $1}' | Fzf-Menu "${FUNCNAME[0]}"
    )
}

sddm_exec_seleted() {
    sddm_theme_conf=$1
    [[ -d "$(dirname ${sddm_conf})" ]] || SUPER mkdir -p "$(dirname ${sddm_conf})"
    [[ -f "${sddm_conf}" ]] && cp -fr "${sddm_conf}" "$(dirname "${sddm_conf}")/kde_settings.t2.bkp"
    # cp "${sddm_theme_conf}" "$(dirname "${sddm_conf}")"
    cp -fr "${sddm_theme_conf}" "${sddm_conf}" && echo "[ok] Sddm theme set"
}

sddm_list_local() {
    declare -A sddm_themes
    output=$(find "${sddm_theme_dir}" -name "kde_settings.conf" -exec grep -H "Current" {} \;)
    [[ -z "${output}" ]] && print_prompt -crit "[error] "  "No settings detected.Do themes have 'kde_settings.conf' declared? " && exit 1

    # Populate the associative array
    while IFS=':' read -r path theme_name; do
        # Remove "Current=" from the theme_name
        theme_name="${theme_name#Current=}"
        sddm_themes["$theme_name"]="$path"
        # echo "Theme Name: $theme_name, Path: $path"
    done <<<"$output"
    # Print the associative array to verify
    for theme_name in "${!sddm_themes[@]}"; do
        # echo "Theme Name: $theme_name, Path: ${sddm_themes[$theme_name]}"
        echo "${theme_name}"
    done
}

sddm_set_local() {

    declare -A sddm_themes
    output=$(find "${sddm_theme_dir}" -name "kde_settings.conf" -exec grep -H "Current" {} \;)
    [[ -z "${output}" ]] && print_prompt -crit "[error] "  "No settings detected.Do themes have 'kde_settings.conf' declared? " && exit 1
    # Populate the associative array
    while IFS=':' read -r path theme_name; do
        # Remove "Current=" from the theme_name
        theme_name="${theme_name#Current=}"
        sddm_themes["$theme_name"]="$path"
        # echo "Theme Name: $theme_name, Path: $path"
    done <<<"$output"

    if [[ -z "${1}" ]]; then
        sddm_theme=$(
            # Print the associative array to verify
            for theme_name in "${!sddm_themes[@]}"; do
                # echo "Theme Name: $theme_name, Path: ${sddm_themes[$theme_name]}"
                echo "${theme_name}"
            done | fzf
        )
    else
        if [[ -v sddm_themes["${1}"] ]]; then
            # Proceed with the theme if it exists in the array
            print_prompt -y "[sddm] " "Setting '${1}' theme"
            # Perform actions with the selected theme
        sddm_theme=${1}
        else
            print_prompt -r "[error] "  "sddm '${1}' theme not found."
            # Handle the case where the theme does not exist
            exit 1
        fi
    fi

    [ -z "${sddm_theme}" ] && print_prompt -r "Operation Cancelled" && return 1
    export sddm_theme_conf="${sddm_themes[$sddm_theme]}"
    
    print_prompt -y "[sddm] " "Setting into '${sddm_theme}' theme from path ${sddm_theme_conf}"

    if [ ! -w "$(dirname ${sddm_conf})" ] || [ ! -w "${sddm_conf}" ]; then
        NOTIFY -a " HyDE-cli " "Run 'sudo chmod -R a+wr $(dirname ${sddm_conf})' to set the permissions one time" -t 10000
        print_prompt -c "[note] " "Run 'sudo chmod -R a+wr $(dirname ${sddm_conf})'  to set the permissions one time"
        pkexec bash -c ". ${CLI_PATH}/lib/hyde-cli/Package-Manager ;. ${CLI_PATH}/lib/hyde-cli/Manage-Sddm;sddm_exec_seleted ${sddm_theme_conf}" || exit 1
    else
        sddm_exec_seleted "${sddm_theme_conf}"
    fi
    enable_service sddm
}

sddm_install() {
    sddm_list_arcs
    sddm_set
}
