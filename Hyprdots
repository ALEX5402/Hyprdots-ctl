#!/bin/bash
hyprdots_ctl_version=v0.1.0.71

export PATH=$PATH:/usr/lib/hyprdots-ctl/

. DEVEL
. GLOBAL 
cd $ScriptDir || handle_error "Cannot Change Directory to $ScriptDir"
. FUNCTIONS 


#! +----------------------------------------------------------------|
#? Add functions below this section.
#? Be careful with spaces in your Function definitions.
#? Example Function:
#* |Function example() { #? Example Function.
#* | case $1 in
#* |      # Cases go here...
#* |   esac
#* |}
#! +----------------------------------------------------------------|

man() { #? Show Manual 
  manPage=$(
    echo -e "Hyprdots: $hyprdots_ctl_version\nHyprdots Clone Directory: $CloneDir\nUsage: Hyprdots [Function] [Arguments]/[Parameters]\n"
    grep -E '^\w+ *\( *\)\s*\{ #\?' $0 | while read -r line; do
      Function=$(echo "$line" | awk 'BEGIN { FS = "[()#?]" } { print $1 }')
      desc=$(echo "$line" | awk 'BEGIN { FS = "[()#?]" } { print $5 }')
      printf "  %-20s %s\n" "[$Function]" "*$desc"
      Parameters "$Function"
    done 
  ) 
  box_me "Manual Page"
  echo "$manPage"
}

version() { #? Hyprdots Version
    box_me "$hyprdots_ctl_version"
}

update() { #? Pull Updates From Hyprdots Repository 
echo "CloneDirectory: $CloneDir"
git stash > /dev/null ; git pull ; git stash pop 2> /dev/null 
rm -f "/tmp/hyprdots_update_check"
  }

install() { #? Installs Hyprdots

    case $1 in
        fresh) #? Fresh installation of Hyprdots
            ./install.sh
            ;;
        custom) #? Custom installation of Apps
        echo "Fresh installation plus custom apps... Press any key to Proceed..."
        ConfigCtl "$CloneDir/Scripts/custom_apps.lst" "$ACTION"
        echo "List of packages to be installed:"
        grep -v '^#' ./custom_apps.lst
            read -n 1 -s -r -p "[ENTER/SPACE:yes ANY:no] Proceed? " key ; [[ -z "$key" ]] || exit 0 
            ./install.sh ./custom_apps.lst
            ;;
            *)
            Parameters "$Function" 
            ;;
    esac
}

restore() { #? Restore Hyprdots
  case $1 in 
        defaults) #? Restore to Default Dots of Hyprdots
        box_me "Restoring to a default Dots from $CloneDir"
        cp ./restore_cfg.lst ./BAKrestore_cfg.lst ; trap 'rm -f ./BAKrestore_cfg.lst' EXIT
        . Manage_Configs
        restore_Lister "$CloneDir/Configs" ;  trap 'rm -f ./BAKrestore_cfg.lst' EXIT
        mark_List
        ask_confirm "Sure"
        ./restore_fnt.sh "BAK"
        ./restore_cfg.sh
        rename_backup "_before_Hyprdots_restore_defaults"
        ;;
        # custom)
        # selected_line=$(cat ./restore_cfg.lst | awk -F '|' '{printf "%s|%s\n", $3, $4 }' | fzf -m --marker='Y' )
        # awk -F'|' -v lines="$selected_line" 'BEGIN{split(lines, a, "\n")} {for(i in a) if(index($0, a[i]) != 0) {$1 = "Y"; print; next} {$1 = "N"; print}}' ./restore_cfg.lst > ./BAKrestore_cfg.lst
        # trap 'rm -f ./BAKrestore_cfg.lst' EXIT
        # ./restore_cfg.sh "BAK" "" ; bak=$(ls -td -- $BkpDir/* | head -n 1 )
        # echo -e "\e[33mProvide a Short Description for the Backup:[All]\e[0m"
        # read user_note; user_note=$(echo "$user_note" | tr ' ' '_'); note=${user_note:-"All"}
        # mv "$bak" "$bak--$note"
        # ;;
        Clone) #? Restores Dots from a Clone Repository
        Manage_Configs "$1" "$2"
        ;;
        BackUp) #? Restores Dots to a previous state.
            trap PreserveCloneDir EXIT
            Manage_Configs "$1"
            ;;
        *)  Parameters "$Function"  ;;
  esac
}

backup() { #? Handles Your Back ups.
            trap PreserveCloneDir EXIT
    case $1 in 
        all) #? Backs up the current configuration.
            Manage_Configs "$1"
            ;;
        # custom)
        #     Manage_Configs "$1"
        # ;;
        revert) #? Revert to a Previous Backup run by 'Hyprdots backup all'.
        barLine
            Manage_Configs "$1"
        barLine
            ;;
        list) #? List the backup
        Manage_Configs "list_Backup"
        ;;
        clean) #? Clear some Storage by Deleting old backups. 
            Manage_Configs "$1"
        ;;
        *)  Parameters "$Function"  ;;
    esac
}

theme() { #? Theme Related Actions 
  # Function for managing themes
case $1 in 
        set) #? Set Theme
        sel_Theme=$(cat $ThemeCtl | awk -F'|' '{print $2}' | fzf )
        "$ScrDir"/themeswitch.sh -s "$sel_Theme"
        ;;
        next) #? Next Theme
            "$ScrDir"/themeswitch.sh -n
        ;; 
        prev) #? Previous Theme
            "$ScrDir"/themeswitch.sh -p
        ;;
        select) #? Theme Selector
            "$ScrDir"/themeselect.sh
        ;;
        patch) #? Patch A Theme from different repository.
           shift
            ./themepatcher.sh "$@"
        ;;
        *)  Parameters "$Function"  ;;

esac
}

wallpaper() { #? Wallpaper related Actions
  case $1 in 
        set) #? Set /Path/to/Wallpapers as new Wallpaper Directory
            shift
            if [ -z "$2" ]; then echo "Missing: /Path/to/Wallpaper" ; exit 1 ; fi
            "$ScrDir"/swwwallpaper.sh -s "$2"
        ;;
        next) #? Next Wallppaer
            "$ScrDir"/swwwallpaper.sh -n 
        ;;
        prev) #? Previous Wallpaper
            "$ScrDir"/swwwallpaper.sh -p
        ;;
        select) #? Wallpaper Selector
            "$ScrDir"/swwwallselect.sh
        ;;
        *)  Parameters "$Function"  ;;

esac
}

sddm() { #? Sddm Things
  case $1 in 
        set) #? Set active Wallpaper to Sddm Lockscreen
            "$ScrDir"/sddmwall.sh
        ;;
        *)  Parameters "$Function"  ;;

esac
}

wallbash() { #? Toggle to use wallpaper color as theme color.
  case $1 in 
        toggle) #? Toggle Wall bash On/Off
            "$ScrDir"/wallbashtoggle.sh
        ;;
        *)  Parameters "$Function"  ;;

esac
}

waybar() { #? Waybar related Things
    case $1 in
        control) #? Edit waybar Control File.
            ACTION="notify-send -a \"Hyprdots\" \"Waybar Updated\" ; "$ScrDir"/wbarconfgen.sh ; killall waybar 2> /dev/null ; $(which waybar) > /dev/null 2>&1 & disown "
            ConfigCtl "$HOME/.config/waybar/config.ctl" "$ACTION"
            ;;
        *)
            Parameters "$Function" 
            ;;
    esac
}

code() { #? Modify Vscode Extensions
case $1 in 
         select) #? Selector for default Theme presets

select_theme() {
            dir=$(cat $ThemeCtl | grep "^1|" | cut -d'|' -f3 | cut -d'~' -f1 | tr '[:upper:]' '[:lower:]')
        code_SubExt=$(cat $HOME/.vscode/extensions/"${dir}"*/package.json | jq -r '.contributes.themes[] | .label' | fzf )
        sed -i "/^1|/s|~[^|]*|~${code_SubExt}|" "$ThemeCtl"
            if [ "$(grep -c "workbench.colorTheme" $ConfDir/Code/User/settings.json)" -eq 1 ] ; then sed -i "/workbench.colorTheme/c\    \"workbench.colorTheme\": \"${code_SubExt}\"," $ConfDir/Code/User/settings.json
            else sed -i "/^{/a\    \"workbench.colorTheme\": \"${code_SubExt}\"," $ConfDir/Code/User/settings.json
            fi
}
if [[ ! -z "$(cat $HOME/.config/hypr/theme.ctl | grep "^1|" | cut -d'|' -f3)" ]]; then select_theme
else echo "No Linked Code Extension found. Would you like to add the extension MANUALLY?"
    ask_confirm ; sel_ext=$(/usr/bin/code --list-extensions | fzf)   
    sed -i '/^1|/ s/[^|]*|[^|]*|[^|]*/&'"$sel_ext"'/' "$ThemeCtl"
    select_theme
fi
         ;;
        *)
        Parameters "$Function" 
         ;;
    esac
}

cache() { #? Cache 
    case $1 in 
      reload) #? Reload Caches if you have new wallpapers.
            ./create_cache.sh
         ;;
      rebuild) #? Force rebuild cache
            read -n 1 -s -r -p "[ENTER:yes ANY:no] Force Rebuild Cache, Proceed? " key ; [[ -z "$key" ]] || exit 0 
            ./create_cache.sh -f
         ;;
        add) #? Cache custom /path/to/wallpaper/* ( Broken)
                if [[ -z $2 ]]; then
                    echo "Please provide a /path/to/wallpaper/*." 
                else
                ./create_cache.sh -c "$2"
        fi
        ;;
        *)
        Parameters "$Function" 
         ;;
    esac
}

Helper() { #! Some of Scripts you might want to use.

    case $1 in 
      chaotic) #? Reload Caches if you have new wallpapers.
            ./create_cache.sh
         ;;
      rebuild) #? Force rebuild cache
            read -n 1 -s -r -p "[ENTER:yes ANY:no] Force Rebuild Cache, Proceed? " key ; [[ -z "$key" ]] || exit 0 
         ;;
        add) #? Cache custom /path/to/wallpaper/* ( Broken)
                    echo "Please provide a /path/to/wallpaper/*." 
        ;;
        *)
        Parameters "$Function" 
         ;;
    esac

}

power() { #? Power Options

    case $1 in 
        reset) #? Reset Changes.
            Power_Manager "$@"
        ;;     
        save) #? Save Power by disabling features
            Power_Manager "$@"
         ;;
        game) #? Toggle Game mode
            Power_Manager  "$@"
        ;;
        *)Parameters "$Function" 
         ;;
    esac

}

show() { #? Some Awsome GUI you might want to use.
    
    case $1 in 
        binds) #? Show Keybindings Hints(Click to execute)
            Keybinds_Hint
        ;;
        emoji) #? Show Emojis
            Emoji_Selector
        ;;
        *)Parameters "$Function" 
         ;;

    esac
}








#! +----------------------------------------------------------------|
"$@" #? Call the appropriate Function based on the first argument.  |
#! +----------------------------------------------------------------|
