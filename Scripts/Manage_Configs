#!/bin/env bash

. GLOBAL_hyde

if [ ! -f "${ctlFile}" ] ; then print_prompt -r "ERROR : '${ctlFile}' does not exist..." -y "\nFetching from $CloneDir" 
    if [ ! -f ${ScriptDir}/restore_cfg.lst ] ; then  print_prompt -r "[ERROR] ${CloneDir} did not contain any ./restore_cfg.lst File!"  ; exit 1
    fi
    awk -F'|' '{print "P|"$(NF-2)"|"$(NF-1)"|"$NF}' ${ScriptDir}/restore_cfg.lst > ${ctlFile}
    cat "${ctlFile}"
    print_prompt -y "[Reminder] Be sure to Check the ${ctlFile} first!"
    exit
fi

prev_restore_list() {
cat << REVIEW 
"Please review the list..."
$(barLine)
O   Overwrite     ﬌ Move Dots to Backup then Populate dots from Source Directory (${CloneDir})
                       Move means mving the whole Directory including all files inside.
S   Sync          ﬌ Copy Dots to Backup > Copy to overwrite Dots from Source Directory (${CloneDir})  
                      ﯧ Recommended to use.It will only overrwrite the CONFLICTING files if both files exist.
P   Preserve      ﬌ Populates Dots But Preserves existing user Dots
                      ﯧ Will skip the files/dirs if it already exists
B   Backup        ﬌ Only Backup the selected Dots (Default)
                      ﯧ 'Hyde backup clean' to do some cleanup
$(barLine)
$(GROUP "${1}")
$(barLine)
REVIEW
}


GROUP() {
 awk -F '|' '{
    # Map the prefix letters to category names
    if ($1 == "P") category = "\\\\ [Preserve/Populate] \\\\";
    else if ($1 == "S") category = "\\\\ [Sync] \\\\";
    else if ($1 == "O") category = "\\\\ [Overwrite] \\\\";
    else if ($1 == "R") category = "\\\\ [Rsync] \\\\";
    else if ($1 == "B") category = "\\\\ [Backup] \\\\";
    else category = "\\\\ [Unknown] \\\\";

    # Skip the first field and print the rest of the line
    files[category] = files[category] ? files[category] "\n" substr($0, index($0, $2)) : substr($0, index($0, $2))
 }

 END {
    n = asorti(files, categories)
    for (i = 1; i <= n; i++) {
      print categories[i] # Print the category name
      split(files[categories[i]], lines, "\n")
      for (j in lines) {
        print lines[j]
      }
      for (j = 1; j <= 68; j++) printf "━"
      printf "\n"
    }
 }' ${1}
}


MENU_config() {
    while true; do
        options=(
          "[Confirm]"
          "[Back Up]"
          "[Preserve/Populate]"
          "[Sync]" 
          "[Overwrite]"
          )

        # Use fzf to select an option
        selected_option=$(printf '%s\n' "${options[@]}" | fzf --prompt='▶' --pointer='→' --marker='♡' --preview "Manage_Configs prev_restore_list ${config_override}" ) 

        # Call the selected function or return to the main menu
        case $selected_option in
            "[Overwrite]")
                list_Marker_OVERWRITE
                ;;
            "[Sync]")
                list_Marker_SYNC
                ;;
            "[Preserve/Populate]")
                list_Marker_PRESERVE
                ;;
            "[Back Up]")
                list_Marker_BACKUP
                ;;
            "[Confirm]")
                # Add your logic here for confirmation
                break # Exit the loop after confirmation
                ;;
            *)
                # echo "Unknown option selected"
                :
                ;;
        esac
    done
}

list_Backup() {
  if [ -d "$BkpDir" ] && [ "$(ls -A "$BkpDir")" ]; then
    print_prompt -m "List of Backups:"
    bak_list=$(ls -l -r $BkpDir | tac | awk '{print $6,$7,$8,$9}')
    print_prompt -b "$bak_list"
  else
    print_prompt -m "Backup: Empty"
  fi
}

restore_Lister() { #* Check the content of a Directory and make a restore list
# Define the backup directory
restore_directory="$1"
# echo "$restore_directory"
: > "${config_override}"
# Read the file line by line
while IFS= read -r line ; do IFS='|' read -r -a array <<< "$line"

  # Get the directory and file/directory name from the 3rd and 4th columns
    dir="${array[2]}"
    files="${array[3]}"
    pkg="${array[4]}" 
    curr="${dir/\$\{HOME\}/}"

  # Split the files into an array
  IFS=' ' read -r -a files_array <<< "$files"
  # Iterate over each file or directory in the 4th column
  for file in "${files_array[@]}"; do

if [ "$restore_directory" = "BACKUP" ]; then
  echo "B|$dir|$file|$pkg" >> "${config_override}"
elif [ "$restore_directory" = "OVERWRITE" ]; then
  echo "O|$dir|$file|$pkg" >> "${config_override}"
else
 if [ -e "$restore_directory$curr/$file" ]; then
    #  echo -e "$curr/$file"
     echo "P|$dir|$file|$pkg" >> "${config_override}"
 fi
fi
  done
done < "./restore_cfg.lst"
# echo "Done: $restore_directory"
# trap 'rm -f ${config_override}' EXIT
}

list_Marker_OVERWRITE() {
OVERWRITE="$(echo -e "[CONFIRM]\n$(awk -F'|' '!/^O/ {for(i=2; i<=NF; i++) printf $i (i==NF ? "\n" : "|")}' "${config_override}")" | \
fzf -m --marker ' '\
 --prompt '[TAB] MARK to "OVERWRITE" [Esc] Back | CTRL A : mark all  | CTRL D : unmark all: ' \
 --bind 'ctrl-a:select-all,ctrl-d:deselect-all' \
 --preview "Manage_Configs prev_restore_list ${config_override}"
 )"

awk -v ignore="$(echo "$OVERWRITE" | sed '/^[[:space:]]*$/d')" -F'|' -v OFS='|' 'BEGIN{split(ignore, a, "\n")} {for(i in a) if(index($0, a[i]) != 0) {$1 = "O"; print; next} {print}}' "${config_override}" > ./temp.lst && mv ./temp.lst "${config_override}"
}

list_Marker_SYNC() {
SYNC="$(echo -e "[CONFIRM]\n$(awk -F'|' '!/^S/ {for(i=2; i<=NF; i++) printf $i (i==NF ? "\n" : "|")}' "${config_override}")" | \
 fzf -m --marker '' \
  --prompt '[TAB] MARK to "SYNCHRONIZE" [Esc] Back | CTRL A : mark all  | CTRL D : unmark all: ' \
 --bind 'ctrl-a:select-all,ctrl-d:deselect-all'\
 --preview "Manage_Configs prev_restore_list ${config_override}" 
  )"

awk -v ignore="$(echo "$SYNC" | sed '/^[[:space:]]*$/d')" -F'|' -v OFS='|' 'BEGIN{split(ignore, a, "\n")} {for(i in a) if(index($0, a[i]) != 0) {$1 = "S"; print; next} {print}}' "${config_override}" > ./temp.lst && mv ./temp.lst "${config_override}"
}


list_Marker_PRESERVE() {
PRESERVE="$(echo -e "[CONFIRM]\n$(awk -F'|' '!/^P/ {for(i=2; i<=NF; i++) printf $i (i==NF ? "\n" : "|")}' "${config_override}")" | \
 fzf -m --marker ' '\
 --prompt '[TAB] MARK to "PRESERVE" [Esc] Back | CTRL A : mark all  | CTRL D : unmark all: ' \
 --bind 'ctrl-a:select-all,ctrl-d:deselect-all' \
 --preview "Manage_Configs prev_restore_list ${config_override}"
 )"

awk -v ignore="$(echo "$PRESERVE" | sed '/^[[:space:]]*$/d')" -F'|' -v OFS='|' 'BEGIN{split(ignore, a, "\n")} {for(i in a) if(index($0, a[i]) != 0) {$1 = "P"; print; next} {print}}' "${config_override}" > ./temp.lst && mv ./temp.lst "${config_override}"
}


list_Marker_BACKUP() {
BACKUP="$(echo -e "[CONFIRM]\n$(awk -F'|' '!/^B/ {for(i=2; i<=NF; i++) printf $i (i==NF ? "\n" : "|")}' "${config_override}")" | \
 fzf -m --marker ' '\
 --prompt '[TAB] MARK to "BACKUP" [Esc] Back | CTRL A : mark all  | CTRL D : unmark all: ' \
 --bind 'ctrl-a:select-all,ctrl-d:deselect-all' \
 --preview "Manage_Configs prev_restore_list ${config_override}"
 )"

awk -v ignore="$(echo "$BACKUP" | sed '/^[[:space:]]*$/d')" -F'|' -v OFS='|' 'BEGIN{split(ignore, a, "\n")} {for(i in a) if(index($0, a[i]) != 0) {$1 = "B"; print; next} {print}}' "${config_override}" > ./temp.lst && mv ./temp.lst "${config_override}"
}


# shellcheck disable=SC2120
list_Marker() {
CloneDir=${1:-${CloneDir}}
if [ -e "${ctlFile}"  ] && [[ $* != *"--custom"* ]] ; then
prev_restore_list "${ctlFile}"

now_restore_cfg_hash="$(md5sum "${CloneDir}/Scripts/restore_cfg.lst" | cut -d' ' -f1)"
    if [ "$now_restore_cfg_hash" != "$restore_cfg_hash" ]; then
      print_prompt -y "New/Changed: '${CloneDir}/Scripts/restore_cfg.lst' !" -w "\nCreate a new control file to avoid conflicts"
    # ask_confirm "Yy"
      #  if [ $? -eq 1 ]; then 
        # awk -F'|' -v OFS='|' '{$1 = "B"; print}' "${config_override}" > ./temp.lst && mv ./temp.lst "${config_override}"
        restore_Lister "${CloneDir}/Configs"
      #  fi
    else
    print_prompt -y "Existing Control file: '${ctlFile}'" -w "\nWould you like to use your last prefered selection?"
    ask_confirm "Yy"
       if [ $? -eq 1 ]; then 
        # awk -F'|' -v OFS='|' '{$1 = "B"; print}' "${config_override}" > ./temp.lst && mv ./temp.lst "${config_override}"
        restore_Lister "${CloneDir}/Configs"    
       else
        cp "${ctlFile}" "${config_override}"
       fi       
    # clear
    # prev_restore_list "${config_override}"
    fi
read
elif [[ $* == *"--custom"* ]] && [ -e "${config_override}" ];then
prev_restore_list "${config_override}"
fi



MENU_config

prev_restore_list "${config_override}"

[[ $* != *"--custom"* ]] && print_prompt -y "Save this as your new control file?" && ask_confirm "Yy" && [ $? -ne 1 ] && cp "${config_override}" "${ctlFile}"

print_prompt -w '[ctrl + c]' -r ' Cancel'
print_prompt -w "Continue?"
# ask_confirm "${USER}"
}

all() {
  list_Backup
  echo -e "\e[33mBacking up Dots and wallpapers(swww), May use significant storage. \nRun 'Hyde backup clean' to free up space.\e[0m" 
  ask_confirm
         awk -F'|' -v OFS='|' '{ $2="B"; print $2"|"$3"|"$4"|"$5  }' ./restore_cfg.lst > ${config_override}
      Restore_Config --only "/tmp/Hyde-${UID}-BAK"
      bak=$(ls -td -- $BkpDir/* | head -n 1 )
      if [[ "$last_bak" != "$bak" ]]; then
        echo -e "\e[33mProvide a Short Description for the Backup:[All]\e[0m"
        read user_note; user_note=$(echo "$user_note" | tr ' ' '_'); note=${user_note:-"All"}
        mv "$bak" "$bak--$note"
      fi
}

# custom() {
#   list_Backup
# #       restore_Lister "BACKUP"
# # cat ${config_override} | awk -F '|' '{printf "%s/%s    %s\n", $3, $4, $5 }' | fzf
# selected_line=$(cat ./restore_cfg.lst | awk -F '|' '{printf "%s|%s\n", $3, $4 }' | fzf -m --marker='Y' )
# #echo "$selected_line"
# awk -F'|' -v lines="$selected_line" 'BEGIN{split(lines, a, "\n")} {for(i in a) if(index($0, a[i]) != 0) {$1 = "Y"; print; next} {$1 = "N"; print}}' ./restore_cfg.lst > ${config_override}
# cat ${config_override}

#         exit 0
#         ./restore_cfg.sh "BAK" "" 
#       bak=$(ls -td -- $BkpDir/* | head -n 1 )
#       if [[ "$last_bak" != $bak ]]; then
#         echo -e "\e[33mProvide a Short Description for the Backup:[All]\e[0m"
#         read user_note; user_note=$(echo "$user_note" | tr ' ' '_'); note=${user_note:-"All"}
#         mv "$bak" "$bak--$note"
#       fi
# }

revert() {
print_prompt -y "Restoring a backup will not create a backup of the current Dots.\nExecute 'Hyde backup all' to save the current Dots"
ask_confirm
         awk -F'|' -v OFS='|' '{ $2="O"; print $2"|"$3"|"$4"|"$5  }' ./restore_cfg.lst > ${config_override} 
            
            
            selected_backup=$(ls -l -r $BkpDir | grep -- '--' | awk '{print $6,$7,$8,$9}' | fzf --prompt 'List of explicit Backup, Run by Hyde backup all' --preview 'tree -aL 3 -d '"$BkpDir"'/$(echo {} | awk "{print \$4}")'  | cut -d ' ' -f4) && echo "$selected_backup" 
            
            if [[ -z $selected_backup ]]; then echo "Operation Cancelled" ; exit 0 ;fi
      Restore_Config --only "/tmp/Hyde-${UID}-BAK" "$BkpDir/$selected_backup"
      bak=$(ls -td -- $BkpDir/* | head -n 1 )
      if [[ "$last_bak" != $bak ]]; then
        rm -fr $bak
        #echo "Removed: $(ls -td -- $BkpDir/* | head -n 1 )"
      fi
}

BackUp() {
if [[ -z ${1} ]] ; then
list_Backup
print_prompt -r "WARNING! " -y "Not all Dots may have been fully backed up, You might encounter errors!" ; ask_confirm
       selected_backup=$(ls -l -r $BkpDir | awk '{print $6,$7,$8,$9}' | grep -v '^[[:space:]]*$' | fzf --prompt='Restoring from a Backup Directory.' --preview 'tree -aL 3 -d '"$BkpDir"'/$(echo {} | awk "{print \$4}")' | cut -d ' ' -f4)  
config_source="${BkpDir}/${selected_backup}"
else
config_source="${1}"
[[ ! -e ${config_source} ]] && print_prompt -r "Invalid Directory: ${config_source} "
fi

if [[ ! -z "$selected_backup" && "$selected_backup" != " " ]] || [[ -e ${config_source} ]] ; then     
      print_prompt -y "Restoring from:" -w "${config_source}"     
      echo "Please Review files to be re-populated to your Dots" 
      if [ -e "${config_source}/$(basename ${ctlFile})" ] ; then
      : cp -f "${config_source}/$(basename ${ctlFile})" "${config_override}" 
      print_prompt -y "Using the Backup manifest file"
      else  restore_Lister "${config_source}"
      fi
        list_Marker "" --custom
        ask_confirm "${USER}"
       if [[ -z $selected_backup ]]; then echo "Nothing Selected" ; exit 0 ;fi
      Restore_Config "/tmp/Hyde-${UID}-BAK" "${config_source}"
      Hyde reload
      bak=$(ls -td -- $BkpDir/* | head -n 1 )
      if [[ "${last_bak}" != "${bak}" ]]; then
        mv "$bak" "$bak-_before_Hyde_restore_BackUp"
        print_prompt -y "Bakckup: $bak-_before_Hyde_restore_BackUp"
      fi
else
  print_prompt -y "Operation cancelled" 
  exit 0
fi
}


clean() {
  list_Backup
selected_backup=$(ls -l -r $BkpDir | awk '{print $6,$7,$8,$9}' | grep -v '^[[:space:]]*$' | fzf -m --marker='X' --prompt 'Select files to be Removed!' )
if [[ ! -z "$selected_backup" && "$selected_backup" != " " ]]; then
  print_prompt -r "To Be Removed:" -n "\n$selected_backup"
  print_prompt -r "WARNING! " -y "Removed Backup is not recoverable, are you sure?" ; ask_confirm "$USER"
echo "$selected_backup" | awk '{print $4}' | while read -r line; do
  if [ -n "$line" ]; then rm -r  "$BkpDir/$line" ; fi
done
else
  print_prompt -y "Operation cancelled" 
  exit 0
fi

}

Clone() {
if [ ! -d "$1" ]; then echo "Not a directory" ; exit 1 ; fi
custClone="$1"
integrity_check "${custClone}"
echo "Generating a Restore List"
cd $custClone/Scripts || handle_error "Cannot Change Directory to $custClone/Scripts"
#! restore_Lister "$custClone/Configs"
list_Marker "${custClone}"
ask_confirm "$USER"
# ./restore_fnt.sh
Restore_Config "/tmp/Hyde-${UID}-BAK" "${custClone}/Configs" && set_metadata "${custClone}"
Hyde reload
}

Configs() {
if [ ! -f "${ctlFile}" ] ; then print_prompt -r "ERROR : '${ctlFile}' does not exist..." -y "\nFetching from $CloneDir" 
    if [ ! -f ${ScriptDir}/restore_cfg.lst ] ; then  print_prompt -r "[ERROR] ${CloneDir} did not contain any ./restore_cfg.lst File!"  ; exit 1
    fi
    awk -F'|' '{print "P|"$(NF-2)"|"$(NF-1)"|"$NF}' ${ScriptDir}/restore_cfg.lst > ${ctlFile}
    cat "${ctlFile}"
    print_prompt -y "[Reminder] Be sure to Modify the ${ctlFile} first!"
    exit
fi
print_prompt -y "Please review the list..."
print_prompt -y "Control File:" -w "${ctlFile}"
cat << REVIEW
O   Overwrite     Move Dots to Backup > Populate dots from Source Directory
S   Sync          Copy Dots to Backup > Copy to overwrite Dots from Source Directory      
P   Preserve      Populates Dots But Preserves User existing Dots
B   Backup        Only Backup the selected Dots
I   Ignore        Skip/Ignore the Dots
REVIEW
        barLine
        cat "${ctlFile}"
        barLine
        print_prompt -y "Clone Directory:" -m "${CloneDir}"
        print_prompt -y "Is This Correct?"
        ask_confirm "${USER}"
        ./restore_fnt.sh
        Restore_Config --only
        Hyde reload
}

upgrade() {
  custom_apps="${CloneDir}/Scripts/custom_apps.lst"
if [[ -e ${custom_apps} ]] ; then 

    sed 's/^#//' "${custom_apps}" | fzf --multi --prompt='Optional packages: press [ TAB ] to select. [ ESC ] exit. [ RETURN ] confirm' > "${install_packages_list}"
    echo -e "Optional packages loaded:"
    cat "${install_packages_list}"
fi

        list_Marker
        # print_prompt -y "Clone Directory:" -m "${CloneDir}"
        # print_prompt -y "Is This Correct?"
      ./install.sh -i "${install_packages_list}"
        ./restore_fnt.sh
        Restore_Config && set_metadata
        Hyde reload
}


"$@"