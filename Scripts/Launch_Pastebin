#!/usr/bin/env sh
export PATH=$PATH:/usr/lib/hyprdots-ctl/
. GLOBAL

CHECK rofi jq wtype

pkill -x rofi && exit

roconf="~/.config/rofi/clipboard.rasi"

# set position
x_offset=-15   #* Cursor spawn position on clipboard
y_offset=210   #* To point the Cursor to the 1st and 2nd latest word
#!base on $HOME/.config/rofi/clipboard.rasi 
# clip_h=$(cat "${XDG_CONFIG_HOME:-$HOME/.config}/rofi/clipboard.rasi" | awk '/window {/,/}/'  | awk '/height:/ {print $2}' | awk -F "%" '{print $1}')
clip_w=$(cat "${XDG_CONFIG_HOME:-$HOME/.config}/rofi/clipboard.rasi" | awk '/window {/,/}/'  | awk '/width:/ {print $2}' | awk -F "%" '{print $1}')
#clip_h=55 #! Modify limits for size of the Clipboard
#clip_w=20 #! This values are transformed per cent(100)
#? Monitor resolution , scale and rotation 
x_mon=$(hyprctl -j monitors | jq '.[] | select(.focused==true) | .width')
y_mon=$(hyprctl -j monitors | jq '.[] | select(.focused==true) | .height')
#? Rotated monitor? 
monitor_rot=$(hyprctl -j monitors | jq '.[] | select(.focused==true) | .transform')
if [ "$monitor_rot" == "1" ] || [ "$monitor_rot" == "3" ]; then  # if rotated 270 deg
 tempmon=$x_mon
    x_mon=$y_mon
    y_mon=$tempmon
#! For rotated monitors
fi
#? Scaled monitor Size
monitor_scale=$(hyprctl -j monitors | jq '.[] | select (.focused == true) | .scale' | sed 's/\.//')
x_mon=$((x_mon * 100 / monitor_scale ))
y_mon=$((y_mon * 100 / monitor_scale))
#? monitor position
x_pos=$(hyprctl -j monitors | jq '.[] | select(.focused==true) | .x')
y_pos=$(hyprctl -j monitors | jq '.[] | select(.focused==true) | .y')
#? cursor position
x_cur=$(hyprctl -j cursorpos | jq '.x')
y_cur=$(hyprctl -j cursorpos | jq '.y')
# Ignore position
 x_cur=$(( x_cur - x_pos))
 y_cur=$(( y_cur - y_pos))
#Limiting
# Multiply before dividing to avoid losing precision due to integer division
clip_w=$(( x_mon * clip_w/100 ))
clip_h=$(( clip_w * 183/100 ))
# clip_h=$(( y_mon*clip_h/100 ))
max_x=$((x_mon - clip_w - 5 )) #offset of 5 for gaps
max_y=$((y_mon - clip_h - 15 )) #offset of 15 for gaps
x_cur=$((x_cur - x_offset))
y_cur=$((y_cur - y_offset))
# 
x_cur=$(( x_cur < min_x ? min_x : ( x_cur > max_x ? max_x :  x_cur)))
y_cur=$(( y_cur < min_y ? min_y : ( y_cur > max_y ? max_y :  y_cur)))

pos="window {location: north west; x-offset: ${x_cur}px; y-offset: ${y_cur}px;}" #! I just Used the old pos function
#pos="window {location: $y_rofi $x_rofi; $x_offset $y_offset}" 

# read hypr theme border

wind_border=$(( hypr_border * 3/2 ))
elem_border=`[ $hypr_border -eq 0 ] && echo "5" || echo $hypr_border`
r_override="window {height: ${clip_h}px; border: ${hypr_width}px; border-radius: ${wind_border}px;} entry {border-radius: ${elem_border}px;} element {border-radius: ${elem_border}px;}"


# read hypr font size

fnt_override=`gsettings get org.gnome.desktop.interface monospace-font-name | awk '{gsub(/'\''/,""); print $NF}'`
fnt_override="configuration {font: \"JetBrainsMono Nerd Font ${fnt_override}\";}"

#? handle pasting 

pasteIt() {
    # is_xwayland=false
    is_term=false
    #  is_xwayland="$(hyprctl -j activewindow | jq -r '.xwayland' )"
    class=$(hyprctl -j activewindow | jq -r '.initialClass') 
    list_term=$(sed -n '/^### startCLASS ###$/,/^### endCLASS ###$/{//!p}' "${0}")
        if echo "${list_term}" | grep -q "${class}" ; then
        is_term=true
        fi

        # if [ "${TERM}" = "linux" ]; then
                if ${is_term} ;then 
                    # notify-send "Terminal"
                    : #? Terminal should be manually pasted
                    # wtype "${selClip}"
                else
                    # if ! ${is_xwayland}; then      
                    # notify-send "Wayland"
                    wtype -M ctrl v -m ctrl #? Better on Wayland
                    # else      
                    # notify-send "Xwayland"
                    # wtype "${selClip}" #? Better on xwayland ;
                    # fi
                fi
        # else 
        #     wl-paste
        # fi
}
#? MultiSelect
 cliphist_decode() {
 # Read the entire input into an array
  mapfile -t lines #! Not POSIX compiliant    
 # Get the total number of lines
 total_lines=${#lines[@]}

if [ "${lines}" = "delete" ] ; then Hyprdots show pastebin d ;exit 0
elif [ "${lines}" = "wipe" ] ; then Hyprdots show pastebin w ; exit 0
else
 # Iterate over each line in the array
 for (( i=0; i<$total_lines; i++ )); do
    line="${lines[$i]}"
    decoded_line="$(echo -e "$line\t" | cliphist decode)"
if [ $i -lt $((total_lines - 1)) ]; then
    printf -v output '%s%s\n' "$output" "$decoded_line"
else
    printf -v output '%s%s' "$output" "$decoded_line"
fi
 done

 echo -n "$output"
fi
}

cliphist_delete() {
awk -F "\t\t\t\t\t" '{print $2}' |
 while IFS= read -r line; do
 echo -e "${line}\t" | cliphist delete
 done
}

checkContent() {
    # Read the input line by line
read -r line
        if  [[ ${line} == *"[[ binary data"* ]]; then
        imag=$(echo -e "${line}"| awk -F "\t\t\t\t\t" '{print $2}' | cat )
        temprev="/tmp/hyprdots-${UID}-pastebin-preview${imag}"
        echo -e "${imag}\t" | cliphist decode | wl-copy 
        wl-paste > "${temprev}"
        notify-send -a "Pastebin:" "Preview: ${imag}" -i "${temprev}" -t 2000
        return 1
        fi
}

# clipboard action
case $1 in
    # c)  cliphist list | rofi -dmenu -theme-str "entry { placeholder: \"Copy...\";} ${pos} ${r_override}" -theme-str "${fnt_override}" -config $roconf | cliphist decode | wl-copy
     c)  selClip=$(cliphist list | awk -F "\t" '{print $2"\t\t\t\t\t"$1} END {print "===============================================================\n\t WIPE PASTE BIN \t\t\t\t\twipe\n\t DELETE \t\t\t\t\tdelete"}' | rofi -dmenu -multi-select  -theme-str  "entry { placeholder: \"Copy...\";} ${pos} ${r_override}" -theme-str "${fnt_override}" -config $roconf ) 
        echo -e "${selClip}" | checkContent
        if [ $? -eq  1 ]; then pasteIt ; exit 0 ; fi
        echo -e "${selClip}" | awk -F "\t\t\t\t\t" '{print $2}' | cliphist_decode | wl-copy
        pasteIt
         ;; 
    d)  cliphist list |  awk -F "\t" '{print $2"\t\t\t\t\t"$1}' | rofi -dmenu  -multi-select -i -theme-str "entry { placeholder: \"Delete...\";} ${pos} ${r_override}" -theme-str "${fnt_override}" -config $roconf |  cliphist_delete
     
        ;;
    w) 
        r_override="window {height:  25%; border: ${hypr_width}px; border-radius: ${wind_border}px;} entry {padding: 2%; border-radius: ${elem_border}px;} element {border-radius: ${elem_border}px;}"
        if [ "$(echo -e "Yes\nNo" | rofi -dmenu -theme-str "entry { placeholder: \"Clear Clipboard History?\";} ${pos} ${r_override}" -theme-str "${fnt_override}" -config $roconf)" == "Yes" ] ; then
            cliphist wipe
        fi
        ;;
    *)  
        echo  "cliphist.sh [action]"
        echo "c :  cliphist list and copy selected"
        echo "d :  cliphist list and delete selected"
        echo "w :  cliphist wipe database"
        exit 1
        ;;
esac



exit


### startCLASS ###
kitty
org.kde.konsole
terminator
XTerm
Alacritty
### endCLASS ###
