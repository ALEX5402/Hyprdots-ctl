#!/bin/env bash

# cat << EVENTS
# event_workspace() {
#   : # WORKSPACENAME
# }

# event_focusedmon() {
#   : # MONNAME WORKSPACENAME
# }

# event_activewindow() {
#   : # WINDOWCLASS WINDOWTITLE

# }
# event_activewindowv2() {
#   : # WINDOWCLASS WINDOWTITLE
# }
# event_windowtitle() {
#   : # WINDOWCLASS WINDOWTITLE
# }

# event_fullscreen() {
#   : # ENTER (0 if leaving fullscreen, 1 if entering)
# }

# event_monitorremoved() {
#   : # MONITORNAME

# }

# event_monitoradded() {
#   : # MONITORNAME
#     Hyprdots monitors

# }

# event_createworkspace() {
#   : # WORKSPACENAME
# }

# event_destroyworkspace() {
#   : # WORKSPACENAME
# }

# event_moveworkspace() {
#   : # WORKSPACENAME MONNAME
# }

# event_activelayout() {
#   : # KEYBOARDNAME LAYOUTNAME
# }

# event_openwindow() {
#   : # WINDOWADDRESS WORKSPACENAME WINDOWCLASS WINDOWTITLE
# }

# event_closewindow() {
#   : # WINDOWADDRESS
# }

# event_movewindow() {
#   : # WINDOWADDRESS WORKSPACENAME
# }

# event_openlayer() {
#   : # NAMESPACE
# }

# event_closelayer() {
#   : # NAMESPACE
# }

# event_submap() {
#   : # SUBMAPNAME
# }
# EVENTS

#!khing#?khing#*khing#!khing#?khing#*khing#!khing#?khing#*khing#!khing#?khing#*khing#!khing#?khing#*khing#!khing#?khing#*khing

event_workspace() {
  : # WORKSPACENAME
}


event_workspacev2() {
  : # WORKSPACENAME2
}

event_focusedmon() {
  : # MONNAME WORKSPACENAME
}

event_activewindow() {
  : # WINDOWCLASS WINDOWTITLE

}
event_activewindowv2() {
  : # WINDOWCLASS WINDOWTITLE
}
event_windowtitle() {
  : # WINDOWCLASS WINDOWTITLE
}

event_fullscreen() {
  : # ENTER (0 if leaving fullscreen, 1 if entering)
}

event_monitorremoved() {
  : # MONITORNAME

}

event_monitoradded() {
  : # MONITORNAME
 ~/.config/hypr/scripts/swwwallpaper.sh
#    Hyprdots show monitors

}

event_createworkspace() {
  : # WORKSPACENAME
}


event_createworkspacev2() {
  : # WORKSPACENAME2
}

event_destroyworkspace() {
  : # WORKSPACENAME
}
event_destroyworkspacev2() {
  : # WORKSPACENAME
}

event_moveworkspace() {
  : # WORKSPACENAME MONNAME
}

event_activelayout() {
  : # KEYBOARDNAME LAYOUTNAME
}

event_openwindow() {
  : # WINDOWADDRESS WORKSPACENAME WINDOWCLASS WINDOWTITLE
}

event_closewindow() {
  : # WINDOWADDRESS
}

event_movewindow() {
  : # WINDOWADDRESS WORKSPACENAME
}

event_openlayer() {
  : # NAMESPACE
}

event_closelayer() {
  : # NAMESPACE
}

event_submap() {
  : # SUBMAPNAME
}

event_changefloatingmode() {
    : #WINDOWCLASS # WINDOWTITLE
}


load_events() {
  IFS=$PFS
  for f in $event_files; do
    if . "$f"; then
      printf >&2 'loaded event file: %s\n' "$f"
    else
      printf >&2 'failed sourcing event file: %s\n' "$f"
      exit 2
    fi
  done
}
handle () { # this Executes it
while true; do
  if read -r event_data; then
    event="${event_data%%>>*}"
    edata="${event_data#"$event">>}"

    IFS=','
    # shellcheck disable=SC2086 # splitting is intended
    set -- $edata
    IFS=$PFS

    if [ 1 == "$verbose" ]; then
      printf >&2 '[%s] 1:%s 2:%s 3:%s 4:%s\n>\n' "$event" "$1" "$2" "$3" "$4"

    fi

      case "$event" in
    "workspace") WORKSPACENAME="$1" event_workspace ;;
    "workspacev2") WORKSPACENAMEv2="$1" event_workspacev2 ;;
    "focusedmon") MONNAME="$1" WORKSPACENAME="$2" event_focusedmon ;;
    "activewindow") WINDOWCLASS="$1" WINDOWTITLE="$2" event_activewindow ;;
    "activewindowv2") WINDOWCLASS="$1" WINDOWTITLE="$2" event_activewindowv2 ;;
    "windowtitle") WINDOWCLASS="$1" WINDOWTITLE="$2" event_windowtitle ;;
    "fullscreen") ENTER="$1" event_fullscreen ;;
    "monitorremoved") MONITORNAME="$1" event_monitorremoved ;;
    "monitoradded") MONITORNAME="$1" event_monitoradded ;;
    "createworkspace") WORKSPACENAME="$1" event_createworkspace ;;
    "createworkspacev2") WORKSPACENAMEv2="$1" event_createworkspacev2 ;;
    "destroyworkspace") WORKSPACENAME="$1" event_destroyworkspace ;;
    "destroyworkspacev2") WORKSPACENAMEv2="$1" event_destroyworkspacev2 ;;
    "moveworkspace") WORKSPACENAME="$1" MONNAME="$2" event_moveworkspace ;;
    "activelayout") KEYBOARDNAME="$1" LAYOUTNAME="$2" event_activelayout ;;
    "openwindow") WINDOWADDRESS="$1" WORKSPACENAME="$2" WINDOWCLASS="$3" WINDOWTITLE="$4" event_openwindow ;;
    "closewindow") WINDOWADDRESS="$1" event_closewindow ;;
    "movewindow") WINDOWADDRESS="$1" WORKSPACENAME="$2" event_movewindow ;;
    "openlayer") NAMESPACE="$1" event_openlayer ;;
    "closelayer") NAMESPACE="$1" event_closelayer ;;
    "submap") SUBMAPNAME="$1" event_submap ;;
    "changefloatingmode") WINDOWCLASS="$1" WINDOWTITLE="$2" event_changefloatingmode  ;;
    "urgent")  : ;; #I don't know this yet
    *) printf >&2 'Unknown event: %s\n' "$event" ;
if [  1 == "$verbose" ] ; then
   notify-send -t 10000 -u "CRITICAL" 'Unknown event:' "Append $event to your hyprevents"
fi
    esac
  fi
done
}

PFS=$IFS
event_files="$*"
load_events
trap 'load_events; continue' USR1
# handle for stable hyprland 
[ ! -d $XDG_RUNTIME_DIR/hypr/$HYPRLAND_INSTANCE_SIGNATURE ] && XDG_RUNTIME_DIR=/tmp
socat -U - UNIX-CONNECT:$XDG_RUNTIME_DIR/hypr/$HYPRLAND_INSTANCE_SIGNATURE/.socket2.sock | while read -r line; do handle "$line"; done
