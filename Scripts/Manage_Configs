#!/bin/bash

. GLOBAL

list_Backup() {
  if [ -d "$BkpDir" ] && [ "$(ls -A "$BkpDir")" ]; then
    print_prompt -m "List of Backups:"
    bak_list=$(ls -l -r $BkpDir | tac | awk '{print $6,$7,$8,$9}')
    print_prompt -b "$bak_list"
  else
    print_prompt -m "Backup: Empty"
  fi
}


list_Marker() {
echo "Please review the list..."
cat << REVIEW
O   Overwrite     Move Dots to Backup > Populate dots from Source Directory
S   Sync          Copy Dots to Backup > Copy to overwrite Dots from Source Directory      
P   Preserve      Populates Dots But Preserves existing user Dots
B   Backup        Only Backup the selected Dots (Default)
REVIEW

awk -F'|' -v OFS='|' '{$1 = "B"; print}' /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst > ./temp.lst && mv ./temp.lst /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst

PRESERVE="$(echo -e "\n$(awk -F'|' '($1 ~ /^B/) {for(i=2; i<=NF; i++) printf $i (i==NF ? "\n" : "|")}' /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst)" | fzf -m --marker '' --prompt '[TAB] MARK to "PRESERVE" [Esc] Continue | CTRL A : mark all  | CTRL D : unmark all | Preserve will copy files from Clone only if dots do not yet exist ' --bind 'ctrl-a:select-all,ctrl-d:deselect-all')"
awk -v ignore="$PRESERVE" -F'|' -v OFS='|' 'BEGIN{split(ignore, a, "\n")} {for(i in a) if(index($0, a[i]) != 0) {$1 = "P"; print; next} {print}}' /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst > ./temp.lst && mv ./temp.lst /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst

SYNC="$(echo -e "\n$(awk -F'|' '($1 ~ /^B/) {for(i=2; i<=NF; i++) printf $i (i==NF ? "\n" : "|")}' /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst)" | fzf -m --marker '' --prompt '[TAB] MARK to "SYNCHRONIZE" [Esc] Continue | CTRL A : mark all  | CTRL D : unmark all | Sync will simply copy current dots to backup. Then fetch dots from Clone ' --bind 'ctrl-a:select-all,ctrl-d:deselect-all')"
awk -v ignore="$SYNC" -F'|' -v OFS='|' 'BEGIN{split(ignore, a, "\n")} {for(i in a) if(index($0, a[i]) != 0) {$1 = "S"; print; next} {print}}' /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst > ./temp.lst && mv ./temp.lst /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst

OVERWRITE="$(echo -e "\n$(awk -F'|' '($1 ~ /^B/) {for(i=2; i<=NF; i++) printf $i (i==NF ? "\n" : "|")}' /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst)" | fzf -m --marker '' --prompt '[TAB] MARK to "OVERWRITE" [Esc] Continue | CTRL A : mark all  | CTRL D : unmark all | Overwrite moves current dots to backup then fetch the dots from Clone' --bind 'ctrl-a:select-all,ctrl-d:deselect-all')"
awk -v ignore="$OVERWRITE" -F'|' -v OFS='|' 'BEGIN{split(ignore, a, "\n")} {for(i in a) if(index($0, a[i]) != 0) {$1 = "O"; print; next} {print}}' /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst > ./temp.lst && mv ./temp.lst /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst


barLine
cat /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst
barLine
echo "Cancel if you change your mind"
}

restore_Lister() { #* Check the content of a Directory and make a restore list
# Define the backup directory
restore_directory="$1"
# echo "$restore_directory"
: > /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst
# Read the file line by line
while IFS= read -r line ; do IFS='|' read -r -a array <<< "$line"

  # Get the directory and file/directory name from the 3rd and 4th columns
    dir="${array[2]}"
    files="${array[3]}"
    pkg="${array[4]}" 
    curr="${dir/\$\{HOME\}/}"

  # Split the files into an array
  IFS=' ' read -r -a files_array <<< "$files"
  # Iterate over each file or directory in the 4th column
  for file in "${files_array[@]}"; do

if [ "$restore_directory" = "CUSTOM" ]; then
  echo "B|$dir|$file|$pkg" >> "/tmp/Hyprdots-${UID}-BAKmanage_cfg.lst"
else
 if [ -e "$restore_directory$curr/$file" ]; then
    #  echo -e "$curr/$file"
     echo "P|$dir|$file|$pkg" >> "/tmp/Hyprdots-${UID}-BAKmanage_cfg.lst"
 fi
fi
  done
done < "./restore_cfg.lst"
# echo "Done: $restore_directory"

}

all() {
  list_Backup
  echo -e "\e[33mBacking up Dots and wallpapers(swww), May use significant storage. \nRun 'Hyprdots backup clean' to free up space.\e[0m" 
  ask_confirm
         awk -F'|' -v OFS='|' '{ $2="B"; print $2"|"$3"|"$4"|"$5  }' ./restore_cfg.lst > /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst ; trap 'rm -f /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst' EXIT
      Restore_Config "/tmp/Hyprdots-${UID}-BAK"
      bak=$(ls -td -- $BkpDir/* | head -n 1 )
      if [[ "$last_bak" != "$bak" ]]; then
        echo -e "\e[33mProvide a Short Description for the Backup:[All]\e[0m"
        read user_note; user_note=$(echo "$user_note" | tr ' ' '_'); note=${user_note:-"All"}
        mv "$bak" "$bak--$note"
      fi
}

# custom() {
#   list_Backup
# #       restore_Lister "CUSTOM"
# # cat /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst | awk -F '|' '{printf "%s/%s    %s\n", $3, $4, $5 }' | fzf
# selected_line=$(cat ./restore_cfg.lst | awk -F '|' '{printf "%s|%s\n", $3, $4 }' | fzf -m --marker='Y' )
# #echo "$selected_line"
# awk -F'|' -v lines="$selected_line" 'BEGIN{split(lines, a, "\n")} {for(i in a) if(index($0, a[i]) != 0) {$1 = "Y"; print; next} {$1 = "N"; print}}' ./restore_cfg.lst > /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst
# cat /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst

#         exit 0
#         trap 'rm -f /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst' EXIT
#         ./restore_cfg.sh "BAK" "" 
#       bak=$(ls -td -- $BkpDir/* | head -n 1 )
#       if [[ "$last_bak" != $bak ]]; then
#         echo -e "\e[33mProvide a Short Description for the Backup:[All]\e[0m"
#         read user_note; user_note=$(echo "$user_note" | tr ' ' '_'); note=${user_note:-"All"}
#         mv "$bak" "$bak--$note"
#       fi
# }

revert() {
print_prompt -y "Restoring a backup will not create a backup of the current Dots.\nExecute 'Hyprdots backup all' to save the current Dots"
ask_confirm
         awk -F'|' -v OFS='|' '{ $2="O"; print $2"|"$3"|"$4"|"$5  }' ./restore_cfg.lst > /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst ; trap 'rm -f /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst' EXIT
            
            
            selected_backup=$(ls -l -r $BkpDir | grep -- '--' | awk '{print $6,$7,$8,$9}' | fzf --prompt 'List of explicit Backup, Run by Hyprdots backup all' --preview 'tree -aL 3 -d '"$BkpDir"'/$(echo {} | awk "{print \$4}")'  | cut -d ' ' -f4) && echo "$selected_backup" 
            
            if [[ -z $selected_backup ]]; then echo "Operation Cancelled" ; exit 0 ;fi
      Restore_Config "/tmp/Hyprdots-${UID}-BAK" "$BkpDir/$selected_backup"
      bak=$(ls -td -- $BkpDir/* | head -n 1 )
      if [[ "$last_bak" != $bak ]]; then
        rm -fr $bak
        #echo "Removed: $(ls -td -- $BkpDir/* | head -n 1 )"
      fi
}

BackUp() {
  list_Backup
print_prompt -r "WARNING! " -y "Not all Dots may have been fully backed up, You might encounter errors!" ; ask_confirm
       selected_backup=$(ls -l -r $BkpDir | awk '{print $6,$7,$8,$9}' | grep -v '^[[:space:]]*$' | fzf --prompt='Restoring from a Backup Directory.' --preview 'tree -aL 3 -d '"$BkpDir"'/$(echo {} | awk "{print \$4}")' | cut -d ' ' -f4)  
if [[ ! -z "$selected_backup" && "$selected_backup" != " " ]]; then     
      echo "Restoring from: $BkpDir/$selected_backup"     
      echo "Please Review files to be re-populated to your Dots" 
        restore_Lister "$BkpDir/$selected_backup" ; trap 'rm -f /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst' EXIT
        list_Marker
        ask_confirm "$USER"
       if [[ -z $selected_backup ]]; then echo "Nothing Selected" ; exit 0 ;fi
      Restore_Config "/tmp/Hyprdots-${UID}-BAK" "$BkpDir/$selected_backup"
      Hyprdots reload
      bak=$(ls -td -- $BkpDir/* | head -n 1 )
      if [[ "$last_bak" != $bak ]]; then
        mv "$bak" "$bak-_before_Hyprdots_restore_BackUp"
      fi
else
  print_prompt -y "Operation cancelled" 
  exit 0
fi
}


clean() {
  list_Backup
selected_backup=$(ls -l -r $BkpDir | awk '{print $6,$7,$8,$9}' | grep -v '^[[:space:]]*$' | fzf -m --marker='X' --prompt 'Select files to be Removed!' )
if [[ ! -z "$selected_backup" && "$selected_backup" != " " ]]; then
  print_prompt -r "To Be Removed:" -n "\n$selected_backup"
  print_prompt -r "WARNING! " -y "Removed Backup is not recoverable, are you sure?" ; ask_confirm "$USER"
echo "$selected_backup" | awk '{print $4}' | while read -r line; do
  if [ -n "$line" ]; then rm -r  "$BkpDir/$line" ; fi
done
else
  print_prompt -y "Operation cancelled" 
  exit 0
fi

}

Clone() {
if [ ! -d "$1" ]; then echo "Not a directory" ; exit 1 ; fi
custClone="$1"
if [ ! -f "$custClone/Configs/.config/hypr/scripts/globalcontrol.sh" ] || [ ! -f "$custClone/Scripts/global_fn.sh" ]; then
  echo "Broken Hyprdots Clone!"
  exit 1
fi
echo "Generating a Restore List"
cd $custClone/Scripts || exit
ls -la
restore_Lister "$custClone/Configs" ; trap 'rm -f /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst' EXIT
list_Marker
ask_confirm "$USER"
./restore_fnt.sh
Restore_Config "/tmp/Hyprdots-${UID}-BAK"
Hyprdots reload
}


config() {
ctlFile="${ctlDir}/manage_cfg.lst"
if [ ! -f "${ctlFile}" ] ; then print_prompt -r "ERROR : '${ctlFile}' does not exist..." -y "\nFetching from $CloneDir" 
    if [ ! -f ${ScriptDir}/restore_cfg.lst ] ; then  print_prompt -r "[ERROR] ${CloneDir} did not contain any ./restore_cfg.lst File!"  ; exit 1
    fi
    awk -F'|' '{print "P|"$(NF-2)"|"$(NF-1)"|"$NF}' ${ScriptDir}/restore_cfg.lst > ${ctlFile}
    cat "${ctlFile}"
    print_prompt -y "[Reminder] Be sure to Modify the ${ctlFile} first!"
    exit
fi
print_prompt -y "Please review the list..."
print_prompt -y "Control File:" -w "${ctlDir}/manage_cfg.lst"
cat << REVIEW
O   Overwrite     Move Dots to Backup > Populate dots from Source Directory
S   Sync          Copy Dots to Backup > Copy to overwrite Dots from Source Directory      
P   Preserve      Populates Dots But Preserves User existing Dots
B   Backup        Only Backup the selected Dots
I   Ignore        Skip/Ignore the Dots
REVIEW
        barLine
        cat ${ctlDir}/manage_cfg.lst
        barLine
        print_prompt -y "Clone Directory:" -m "${CloneDir}"
        print_prompt -y "Is This Correct?"
        ask_confirm "${USER}"
        ./restore_fnt.sh
        Restore_Config
        Hyprdots reload
}


"$@"