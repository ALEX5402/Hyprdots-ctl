#!/bin/bash

. GLOBAL

list() {
  if [ -d "$BkpDir" ] && [ "$(ls -A "$BkpDir")" ]; then
    print_prompt -m "List of Backups:"
    bak_list=$(ls -l -r $BkpDir | tac | awk '{print $6,$7,$8,$9}')
    print_prompt -b "$bak_list"
  else
    print_prompt -m "Backup: Empty"
  fi
}

check_content() {
# Define the backup directory
backup_target="$1"
> ./BAKrestore_cfg.lst
# Read the file line by line
while IFS= read -r line ; do IFS='|' read -r -a array <<< "$line"

  # Get the directory and file/directory name from the 3rd and 4th columns
    dir="${array[2]}"
    files="${array[3]}"
    pkg="${array[4]}" 
    cur="${dir/\$\{HOME\}/}"

  # Split the files into an array
  IFS=' ' read -r -a files_array <<< "$files"
  # Iterate over each file or directory in the 4th column
  for file in "${files_array[@]}"; do



if [ "$backup_target" = "CUSTOM" ]; then
  echo "N|Y|$dir|$file|$pkg" >> "./BAKrestore_cfg.lst"
else
 if [ -e "$backup_target$cur/$file" ]; then
     echo -e "$cur/$file"
     echo "Y|Y|$dir|$file|$pkg" >> "./BAKrestore_cfg.lst"
 fi
fi
  done
done < "./restore_cfg.lst"
}





all() {
  list
  echo -e "\e[33mBacking up Dots and wallpapers(swww), May use significant storage. \nRun 'Hyprdots backup clean' to free up space.\e[0m" 
  ask_confirm
         awk -F'|' -v OFS='|' '{ $1="N"; $2="Y"; print }' ./restore_cfg.lst > ./BAKrestore_cfg.lst ; trap 'rm -f ./BAKrestore_cfg.lst' EXIT
        ./restore_cfg.sh "BAK" ""
      bak=$(ls -td -- $BkpDir/* | head -n 1 )
      if [[ "$last_bak" != $bak ]]; then
        echo -e "\e[33mProvide a Short Description for the Backup:[All]\e[0m"
        read user_note; user_note=$(echo "$user_note" | tr ' ' '_'); note=${user_note:-"All"}
        mv "$bak" "$bak--$note"
      fi
}

custom() {
  list
#       check_content "CUSTOM"
# cat ./BAKrestore_cfg.lst | awk -F '|' '{printf "%s/%s    %s\n", $3, $4, $5 }' | fzf
selected_line=$(cat ./restore_cfg.lst | awk -F '|' '{printf "%s|%s\n", $3, $4 }' | fzf -m --marker='Y' )
#echo "$selected_line"
awk -F'|' -v lines="$selected_line" 'BEGIN{split(lines, a, "\n")} {for(i in a) if(index($0, a[i]) != 0) {$1 = "Y"; print; next} {$1 = "N"; print}}' ./restore_cfg.lst > ./BAKrestore_cfg.lst
cat ./BAKrestore_cfg.lst

        exit 0
        trap 'rm -f ./BAKrestore_cfg.lst' EXIT
        ./restore_cfg.sh "BAK" "" 
      bak=$(ls -td -- $BkpDir/* | head -n 1 )
      if [[ "$last_bak" != $bak ]]; then
        echo -e "\e[33mProvide a Short Description for the Backup:[All]\e[0m"
        read user_note; user_note=$(echo "$user_note" | tr ' ' '_'); note=${user_note:-"All"}
        mv "$bak" "$bak--$note"
      fi
}

revert() {
print_prompt -y "Restoring a backup will not create a backup of the current Dots.\nExecute 'Hyprdots backup all' to save the current Dots"
ask_confirm
              awk -F'|' -v OFS='|' '{ $1="Y"; $2="N"; print }' ./restore_cfg.lst > ./BAKrestore_cfg.lst ; trap 'rm -f ./BAKrestore_cfg.lst' EXIT
            selected_backup=$(ls -l -r $BkpDir | grep -- '--' | awk '{print $6,$7,$8,$9}' | fzf --prompt 'List of explicit Backup, Run by Hyprdots backup all' --preview 'tree -aL 3 -d '"$BkpDir"'/$(echo {} | awk "{print \$4}")'  | cut -d ' ' -f4) && echo "$selected_backup" 
            if [[ -z $selected_backup ]]; then echo "Operation Cancelled" ; exit 0 ;fi
             ./restore_cfg.sh "BAK" "$BkpDir/$selected_backup";
      bak=$(ls -td -- $BkpDir/* | head -n 1 )
      if [[ "$last_bak" != $bak ]]; then
        rm -fr $bak
        #echo "Removed: $(ls -td -- $BkpDir/* | head -n 1 )"
      fi
}

BackUp() {
  list
print_prompt -r "WARNING! " -y "Not all Dots may have been backed up, so use with caution!" ; ask_confirm "Okay"
       selected_backup=$(ls -l -r $BkpDir | awk '{print $6,$7,$8,$9}' | grep -v '^[[:space:]]*$' | fzf --prompt='Restoring from a Backup Directory.' --preview 'tree -aL 3 -d '"$BkpDir"'/$(echo {} | awk "{print \$4}")' | cut -d ' ' -f4)  
if [[ ! -z "$selected_backup" && "$selected_backup" != " " ]]; then     
      echo "Restoring from: $BkpDir/$selected_backup"     
      echo "Please Review files to be re-populated to your Dots" 
        check_content "$BkpDir/$selected_backup" ; trap 'rm -f ./BAKrestore_cfg.lst' EXIT
        ask_confirm
       if [[ -z $selected_backup ]]; then echo "Nothing Selected" ; exit 0 ;fi
    ./restore_cfg.sh "BAK" "$BkpDir/$selected_backup"
      bak=$(ls -td -- $BkpDir/* | head -n 1 )
      if [[ "$last_bak" != $bak ]]; then
        mv "$bak" "$bak-_before_Hyprdots_restore_BackUp"
      fi
else
  print_prompt -y "Operation cancelled" 
  exit 0
fi
}


clean() {
  list
selected_backup=$(ls -l -r $BkpDir | awk '{print $6,$7,$8,$9}' | grep -v '^[[:space:]]*$' | fzf -m --marker='X' --prompt 'Select files to be Removed!' )
if [[ ! -z "$selected_backup" && "$selected_backup" != " " ]]; then
  print_prompt -r "To Be Removed:" -n "\n$selected_backup"
  print_prompt -r "WARNING! " -y "Removed Backup is not recoverable, are you sure?" ; ask_confirm "Sure"
echo "$selected_backup" | awk '{print $4}' | while read -r line; do
  if [ -n "$line" ]; then rm -r  "$BkpDir/$line" ; fi
done
else
  print_prompt -y "Operation cancelled" 
  exit 0
fi

}



$@