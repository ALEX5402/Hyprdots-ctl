#!/usr/bin/env bash

# TODO Do some clean up
#  insipired from https://github.com/stevenliebregt/rofi-scripts/blob/master/web-search.sh
# Modified by khing to fit on Hyde usage

set -eu

CACHE_DIR="$cacheDir/hyde-search"
# BROWSER="google-chrome-stable"
# BROWSER="firefox"

[[ -f "${CACHE_DIR}/recent.site" ]] && source "${CACHE_DIR}/recent.site"

rofi_pos
r_width="width: ${search_width:-40em};"
r_height="height: ${search_height:-23em};"
r_listview="listview { lines: ${search_line:-8}; }"
r_override="window {$r_height $r_width border: ${hypr_width}px; border-radius: ${wind_border}px;} entry {border-radius: ${elem_border}px;} element {border-radius: ${elem_border}px;} ${r_listview} "

declare -A SITES

# Set default variable value to empty string.
SITE_TO_USE=""

SITES=(
	["google"]="https://www.google.com/search?q="
	["yahoo"]="https://search.yahoo.com/search?p="
	["bing"]="https://www.bing.com/search?q="
	["duckduckgo"]="https://duckduckgo.com/?q="
	["startpage"]="https://www.startpage.com/do/search?query="
	["amazon"]="https://www.amazon.com/s?k="
	["wikipedia"]="https://en.wikipedia.org/w/index.php?search="
	["stackoverflow"]="https://www.stackoverflow.com/search?q="
	["stackexchange"]="https://stackexchange.com/search?q="
	["superuser"]="https://superuser.com/search?q="
	["tex"]="https://tex.stackexchange.com/search?q="
	["softwareengineering"]="https://softwareengineering.stackexchange.com/search?q="
	["github"]="https://www.github.com/search?q="
	["youtube"]="https://www.youtube.com/results?search_query="
	["superuser"]="https://www.superuser.com/search?q="
	["archlinux"]="https://archlinux.org/packages/?sort=&q="
	["AUR"]="https://aur.archlinux.org/packages?O=0&K="
)

# Show usage for the script.
usage() {
	cat <<EOF
-s [search engine]      give the search engine to use, can be one of the following:
$(
		for site in "${!SITES[@]}"; do
			echo -e "\t* $site"
		done
	)
-b [browser]      browser to use, follows the default xdg browser
EOF

	exit 1
}

# Creates the cache directory if it does not exist.
create_cache_dir() {
	if [ ! -d "$CACHE_DIR" ]; then
		echo "Hyde-cli created a directory: ${CACHE_DIR}"
		mkdir -p "$CACHE_DIR"
	fi
}

# Create the cache files if they do not exist.
create_cache_files() {
	for site in "${!SITES[@]}"; do
		if [ ! -f "$CACHE_DIR/$site.txt" ]; then
			touch "$CACHE_DIR/$site.txt"
		fi
	done
}

# Generate the list of sites.
#
# If a config file exists, use the sites from that list, otherwise populate
# the list with the sites from the $SITES variable.
gen_sites_list() {
	for site in "${!SITES[@]}"; do
		printf "%s\n" "$site"
	done | sort
}

# Generate the list of previously used search queries.
gen_queries_list() {
	site=$1
	cat "$CACHE_DIR/$site.txt"
}

# Write a given line to a given file to the top of the file.
#
# It does this by creating a temporary file and then catting that output to the
# file after echoing the new line.
#
# Expects 2 arguments:
#  - The name of the file to write to, must be one of the options of sites in
#    the SITES array.
#  - The new line to input at the top of the new file.
write_to_top() {
	file=$1
	content=$2

	# Move old values to temporary file.
	cat "$CACHE_DIR/$file.txt" >"$CACHE_DIR/tmp.txt"
	# Print query to top.
	echo "$content" >"$CACHE_DIR/$file.txt"
	cat "$CACHE_DIR/tmp.txt" >>"$CACHE_DIR/$file.txt"
	# Remove temporary file.
	rm "$CACHE_DIR/tmp.txt"

}

# Handle the query.
handle_query() {
	site=$1
	query=$2
	echo "recentSite=\"${site}\"" >"${CACHE_DIR}/recent.site"
	# Write the query to file.
	# Check if the search query already exists.
	if grep -Fxq "$query" "$CACHE_DIR/$site.txt"; then
		# Remove the existing entry.
		echo "$(cat "$CACHE_DIR/$site.txt" | grep -xv "$query")" >"$CACHE_DIR/$site.txt"
		# Write the new entry on top.
		write_to_top "$site" "$query"
	else
		# Write the new entry on top.
		write_to_top "$site" "$query"
	fi

	# Open the corresponding site in google-chrome-stable.
	# google-chrome-stable "${SITES[$site]}$query"
	[ -n "${BROWSER}" ] && "${BROWSER}" "${SITES[$site]}$query" && exit 0
	xdg-open "${SITES[$site]}$query"
}

handle_input() {
	inputTxt="${*}"
	if [[ ${inputTxt} =~ ":" ]]; then
		key="$(awk -F ':' '{print $1}' <<<$inputTxt)"
		if [[ -n "${key}" ]]; then
			query="$(awk -F':' '{for(i=2; i<=NF; ++i) print $i}' <<<$inputTxt)"
			parseSite="$(grep -iE "^${key}" <<<"$(gen_sites_list)" | head -n 1)"
			if [[ -n "${parseSite}" ]]; then
				site="${parseSite}"
			else
				query="$(awk -F':' '{for(i=2; i<=NF; ++i) print $i}' <<<$inputTxt)"
				site=$(rofi -dmenu -i -no-custom -select "${recentSite}" -theme-str "${r_override}" -theme-str "entry { placeholder:  \" Select a Search engine\" ;}" -config $confDir/rofi/clipboard.rasi <<<"$(gen_sites_list)")
			fi

		else
			query="$(awk -F':' '{for(i=2; i<=NF; ++i) print $i}' <<<$inputTxt)"
			site=$(rofi -dmenu -i -no-custom -select "${recentSite}" -theme-str "${r_override}" -theme-str "entry { placeholder:  \" Select a Search engine\" ;}" -config $confDir/rofi/clipboard.rasi <<<"$(gen_sites_list)")
		fi
	else
		query="${inputTxt}"
		site=$(rofi -dmenu -i -no-custom -select "${recentSite}" -theme-str "${r_override}" -theme-str "entry { placeholder:  \" Select a Search engine\" ;}" -config $confDir/rofi/clipboard.rasi <<<"$(gen_sites_list)")
	fi

	handle_query "$site" "$query"

}

main() {
	create_cache_dir
	create_cache_files

	if [ "$@" ]; then
		handle_query "google" "$@"
	else
		# Check if search engine set.
		if [ "$SITE_TO_USE" ]; then
			query=$(rofi -dmenu -i -p -theme-str "${r_override}" -theme-str "entry { placeholder:  \" Search ($SITE_TO_USE)\" ;}" -config $confDir/rofi/clipboard.rasi <<<"$(gen_queries_list $SITE_TO_USE)")
			handle_query "$SITE_TO_USE" "$query"
		else
			inputTxt=$(rofi -dmenu -i -select "${recentSite}" -theme-str "${r_override}" -theme-str "entry { placeholder:  \" Search a keyword or select a  Search Engine \" ;}" -config $confDir/rofi/clipboard.rasi <<<"$(gen_sites_list)")
			if gen_sites_list | grep -q "${inputTxt}"; then
				site="$(gen_sites_list | grep ${inputTxt})"
				query=$(rofi -dmenu -i -p -theme-str "${r_override}" -theme-str "entry { placeholder:  \" Search ($site)\" ;}" -config $confDir/rofi/clipboard.rasi <<<"$(gen_queries_list $site)")
				handle_query "$site" "$query"
			else
				handle_input "${inputTxt}"
			fi
		fi
	fi
}

# Get argument options.
while getopts ":s:b:" o; do
	case "${o}" in
	s)
		SITE_TO_USE=${OPTARG}
		;;
	b)
		BROWSER=${OPTARG}
		;;
	?)
		usage
		;;
	esac
done
shift $((OPTIND - 1))

main "$@"
