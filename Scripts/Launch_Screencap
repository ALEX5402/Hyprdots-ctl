#!/usr/bin/env sh

export PATH=$PATH:/usr/lib/hyprdots-ctl/
. GLOBAL 

check grimblast wl-screenrec


if [ -z "$XDG_PICTURES_DIR" ] ; then
    XDG_PICTURES_DIR="$HOME/Pictures"
fi

if [ -z "$XDG_VIDEOS_DIR" ] ; then
    XDG_VIDEOS_DIR="$HOME/Videos"
fi

#variables
logFile="/tmp/hyprdots-${UID}-screencap.log"
cacheFile="$cacheCtl/screencap"

vid_dir="${2:-$XDG_VIDEOS_DIR/Recordings}"
vid_file=$(date +'%y%m%d_%Hh%Mm%Ss_screenrecord.mp4')

swpy_dir="${XDG_CONFIG_HOME:-$HOME/.config}/swappy"
img_dir="${2:-$XDG_PICTURES_DIR/Screenshots}"
img_file=$(date +'%y%m%d_%Hh%Mm%Ss_screenshot.png')
temp_screenshot="/tmp/screenshot.png"


mkdir -p $img_dir
mkdir -p $vid_dir
mkdir -p $swpy_dir
echo -e "[Default]\nsave_dir=$img_dir\nsave_filename_format=$img_file" > $swpy_dir/config


first_setup() {
if [ ! -f "${cacheFile}" ]; then

touch "${cacheFile}"
video_driver_files=$(find /usr/lib/dri -type f -name "*_drv_video.so" -printf '%P\n' | sed 's/_drv_video.so$//')

for libva_Driver in $video_driver_files; do
vaMsg="export LIBVA_DRIVER_NAME=\"$libva_Driver\" # This is the driver to be used by wl-screenrec" 
    export LIBVA_DRIVER_NAME=$libva_Driver
    if  wl-screenrec > "${logFile}" 2>&1  & sleep 5 && pkill --signal=SIGINT wl-screenrec ; then
        if grep -q "Failed to initialise VAAPI connection" "${logFile}"; then
            echo "$libva_Driver : Not Supported"
        else
            {                 
                echo -e "${vaMsg}" 
                echo "screen_recorder=\"wl-screenrec\"" 
            } >> "${cacheFile}"
            notify-send -a "ScreenCap" "wl-screenrec will use \"$libva_Driver\" for screen recording."
            killall wl-screenrec
            break
        fi
    else
        echo "Segmentation fault occurred while testing $libva_Driver. Continuing "
    fi
done

if ! grep -q "${vaMsg}" "${cacheFile}"; then
    notify-send -a "ScreenCap" "Oh no! wl-screenrec might not work on your system. Will use 'wf-recorder' for now."
    vaMsg="#! Oh no! wl-screenrec is not working for you. Do not worry we will use wf-recorder instead. Try to run 'wl-screenrec' in termianl." 
    { 
    echo "${vaMsg}" 
    echo "screen_recorder=\"wf-recorder\"" 
    } >> "${cacheFile}"
    check wf-recorder
fi
# Restart the script
exec "$0"
else 
    . "${cacheFile}"
fi

}

print_error() {
cat << "EOF"
    ./screenshot.sh <action>
    ...valid actions are...
        p : print all screens
        s : snip current screen
        sf : snip current screen (frozen)
        m : print focused monitor
EOF
}

first_setup

case $1 in
p)  # print all outputs
    grimblast copysave screen $temp_screenshot && swappy -f $temp_screenshot ;;
rs) # record screen
echo "${vid_dir}/${vid_file}" 
"${screen_recorder}" -f "${vid_dir}/${vid_file}" 
;;
s)  # drag to manually snip an area / click on a window to print it
    grimblast copysave area $temp_screenshot && swappy -f $temp_screenshot ;;
sf)  # frozen screen, drag to manually snip an area / click on a window to print it
    grimblast --freeze copysave area $temp_screenshot && swappy -f $temp_screenshot ;;
m)  # print focused monitor
    grimblast copysave output $temp_screenshot && swappy -f $temp_screenshot ;;
*)  # invalid option
    print_error ;;
esac

rm -f "$temp_screenshot"


if [ -f "$img_dir/$img_file" ] ; then
    notify-send "t1" -a "Saved in $img_dir" -i "$img_dir/$img_file" -r 91190 -t 2200
fi
