#!/bin/bash

export PATH=$PATH:/usr/lib/hyprdots-ctl/
. GLOBAL 

FileOverride="${1:-${ctlDir}/}"              #override default config list with custom theme list [param 1]
ctlFile="${FileOverride}manage_cfg.lst"
CfgDir="${2:-${CloneDir}/Configs}"  #override default config path with custom theme path [param 2]

if [ ! -f "${ctlFile}" ] ; then
    echo "ERROR : '${ctlFile}'   does not exist... I will give a sample for you" 
cat << FILE > "${ctlFile}"
P|${HOME}|.zshrc .p10k.zsh|zsh oh-my-zsh-git zsh-theme-powerlevel10k pokemon-colorscripts-git
O|${HOME}/.config/Code/User|settings.json|visual-studio-code-bin
O|${HOME}/.config|dunst|dunst
O|${HOME}/.config/hypr|animations.conf hyprland.conf theme.ctl windowrules.conf scripts themes wallbash|hyprland
P|${HOME}/.config/hypr|keybindings.conf monitors.conf userprefs.conf|hyprland
O|${HOME}/.config/hypr|nvidia.conf|hyprland nvidia-utils
O|${HOME}/.config|kitty|kitty
O|${HOME}/.config|Kvantum|kvantum
O|${HOME}/.config|MangoHud|mangohud
O|${HOME}/.config|neofetch|neofetch
O|${HOME}/.config|qt5ct|qt5ct
O|${HOME}/.config|rofi|rofi
O|${HOME}/.config|swaylock|swaylock-effects
P|${HOME}/.config|swww|swww
O|${HOME}/.config|waybar|waybar
O|${HOME}/.config|wlogout|wlogout
O|${HOME}/.config|nwg-look gtk-3.0 xsettingsd|nwg-look
O|${HOME}/.icons|default|nwg-look
O|${HOME}|.gtkrc-2.0|nwg-look
O|${HOME}/.config|dolphinrc kdeglobals|dolphin
O|${HOME}/.local/share|dolphin|dolphin
O|${HOME}/.local/share/kxmlgui5|dolphin|dolphin   
FILE
fi

if [ ! -d "${CfgDir}" ] ; then
    echo "ERROR : '${CfgDir}' does not exist..."
    exit 1
fi

BkpDir="${HOME}/.config/cfg_backups/$(date +'%y%m%d_%Hh%Mm%Ss')"

        if [ -d "${BkpDir}" ] ; then
    echo "ERROR : ${BkpDir} exists!"
    exit 1
else
    mkdir -p "${BkpDir}"
fi

while read lst
do

    ctlFlag=$(echo "${lst}" | awk -F '|' '{print $1}')
    pth=$(echo "${lst}" | awk -F '|' '{print $2}')
    pth=$(eval echo "${pth}")
    cfg=$(echo "${lst}" | awk -F '|' '{print $3}')
    pkg=$(echo "${lst}" | awk -F '|' '{print $4}')

# Check if ctlFlag is not one of the values 'O', 'R', 'B', 'S', or 'P'
if [[ "${ctlFlag}" = "I" ]]; then
echo "[IGNORE] ${pth}/${cfg}"
    continue 2
fi

# Start a loop that reads each line from the output of the command enclosed within the process substitution '< <(...)'
while read -r pkg_chk
do

    # Call the function pkg_installed with the argument pkg_chk. If the function returns false (the package is not installed), then...
    if ! pkg_installed ${pkg_chk} 
        then
        # Print a message stating that the current configuration is being skipped because a dependency is not installed
        echo "[SKIP] '${pkg_chk}' as dependency  ${pth}/${cfg}"
        # Skip the rest of the current loop iteration and proceed to the next iteration
        continue 2
    fi
done < <( echo "${pkg}" | xargs -n 1 )

# Pipe the value of cfg to xargs, which splits it into separate arguments based on spaces, and then pipe the output to a while loop
echo "${cfg}" | xargs -n 1 | while read -r cfg_chk
do

        # Check if the variable pth is empty, if it is, skip the current iteration
        if [[ -z "${pth}" ]]; then continue; fi

# Remove the HOME directory from the beginning of the path stored in pth and store the result in tgt
tgt=$(echo "${pth}" | sed "s+^${HOME}++g")
crnt_cfg="${pth}/${cfg_chk}"

    if [ ! -e "${CfgDir}$tgt/${cfg_chk}" ]; then
        echo "Source: ${CfgDir}$tgt/${cfg_chk} does not exist, skipping..."
        continue
    fi

        if [ -e "${crnt_cfg}" ]; then
        # echo "Files exist: ${crnt_cfg}"
            # Check if the directory specified by BkpDir and tgt exists, if it doesn't, create it
            if [ ! -d "${BkpDir}${tgt}" ] ; then mkdir -p "${BkpDir}${tgt}" ; fi

            case "${ctlFlag}" in
                "B")
                    cp -r "${pth}/${cfg_chk}" "${BkpDir}${tgt}" ; echo "[BACK-UP] ${pth}/${cfg_chk} --> ${BkpDir}${tgt}..."                                                          
                    ;;
                "O")
                    
                    mv "${pth}/${cfg_chk}" "${BkpDir}${tgt}" 
                    cp -r "${CfgDir}$tgt/${cfg_chk}" "${pth}"
                    echo "[OVERWRITE] ${pth} <-- ${CfgDir}${tgt}/${cfg_chk}"
                    ;;
                "S")
                    # Code to execute if ctlFlag is 'S'
                    cp -rf "${CfgDir}$tgt/${cfg_chk}" "${pth}"    
                    echo "[Sync] ${pth} <-- ${CfgDir}${tgt}/${cfg_chk}"
                    ;;
                "P")
                    if ! cp -rn "${CfgDir}$tgt/${cfg_chk}" "${pth}" 2>/dev/null ; then
                        echo "[PRESERVED] ${pth}${tgt}/${cfg_chk}"
                    else
                        echo "[POPULATE] ${pth} <-- ${CfgDir}${tgt}/${cfg_chk}"
                    fi
                    ;;
            esac
        else
                    cp "${CfgDir}$tgt/${cfg_chk}" "${pth}"
                    echo "[POPULATE] ${pth} <-- ${CfgDir}${tgt}/${cfg_chk}"                  
        fi

    done

done < "${ctlFile}"



if [ "$(lspci -k | grep -A 2 -E "(VGA|3D)" | grep -i nvidia -c)" -gt 0 ] && [ $(grep '^source = ~/.config/hypr/nvidia.conf' ${HOME}/.config/hypr/hyprland.conf | wc -l) -eq 0 ] ; then
    echo -e 'source = ~/.config/hypr/nvidia.conf # auto sourced vars for nvidia
' >> ${HOME}/.config/hypr/hyprland.conf
fi

./create_cache.sh
./restore_lnk.sh
