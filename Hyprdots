#!/bin/env bash
if [ "$(whoami)" = "root" ] || [ "$(id -u)" -eq 0 ] ; then echo "Oh no! What have you done! Hyprdots-ctl is design for 'user' space ONLY ...EXITING" ; exit 1 ;fi

export PATH=$PATH:/usr/lib/hyprdots-ctl/

hyprdots_ctl_version=$(cat /etc/hyprdots-ctl/.hyprdots-ctl.ver | head -1)

# . DEVEL
. GLOBAL 
cd $ScriptDir || handle_error "Cannot Change Directory to $ScriptDir"
. FUNCTIONS 

#! +----------------------------------------------------------------|
#? Add functions below this section.
#? Be careful with spaces in your Function definitions.
#? Example Function:
#* |Function example() { #? Example Function.
#* | case $1 in
#* |      # Cases go here...
#* |   esac
#* |}
#! +----------------------------------------------------------------|

man() { #? Show Manual 
  manPage=$(
    echo -e "Hyprdots-ctl: ${hyprdots_ctl_version}\nHyprdots Clone Directory: ${CloneDir}\nUsage: Hyprdots [Function] [options]\n"
    grep -E '^\w+ *\( *\)\s*\{ #\?' $0 | while read -r line; do
      Function=$(echo "$line" | awk 'BEGIN { FS = "[()#?]" } { print $1 }')
      desc=$(echo "$line" | awk 'BEGIN { FS = "[()#?]" } { print $5 }')
      printf "  %-20s %s\n" "[${Function}]" "*${desc}"
      Parameters "${Function}"
    done 
  ) 
  box_me "Manual Page"
  echo "${manPage}"
}

version() { #? Hyprdots-ctl Version
box_me -s "Hyprdots-ctl Version" -c 77
cat /etc/hyprdots-ctl/.hyprdots-ctl.ver
}

systeminfo() { #? System Information
print_prompt -y "**Hyprdots-ctl Version:**"
cat /etc/hyprdots-ctl/.hyprdots-ctl.ver

print_prompt -y "\n**Repository:**"
repo_info

print_prompt -y "\n**GPU:** "
lspci -nn | grep -Ei "VGA|3d"  

print_prompt -y "\n**CPU:** "
lscpu | awk -F': ' '/Model name/ {gsub(/^ *| *$| CPU.*/,"",$2); print $2}'

print_prompt -y "\n**OS:** "
cat /etc/os-release 

print_prompt -y "\n**Hyprland System Information:** (Not always available)" 
hyprctl systeminfo
}

branch() { #? Set pref Hyprdots branch
repo_info
( check_Ping && print_prompt -w "Fetching updates" && git fetch )  ||  true
set_branch
}

update() { #? Pull Updates From Hyprdots Repository 
trap 'rm -f "/tmp/hyprdots_update_check"' EXIT
repo_info
get_aurhlpr
print_prompt -y "Pulling Hyprdots repo..."
git stash > /dev/null ; git pull ; git stash pop 2> /dev/null 
# Check release
 [ ! -f /etc/arch-release ] && exit 0
 print_prompt -y "Checking Hyprdots CLI updates..."
if ${aurhlpr} -Qu --devel hyprdots-ctl-git | grep -q hyprdots-ctl-git; then 
${aurhlpr} -S --devel hyprdots-ctl-git 
else print_prompt -w "Already up to date"
fi
}

upgrade() { #? Upgrades dots from the Repository; Manage the control file : '~/.config/hyprdots-ctl/manage_cfg.lst'
    repo_info
    ask_confirm
    Manage_Configs "upgrade"
    rename_backup "_Hyprdots_upgrade"
}

restore() { #? Restore Hyprdots configs
  case $1 in 
        defaults) #? Restore to Default Dots of Hyprdots
        shift
        box_me "Restoring Dots"
            repo_info
                    ask_confirm
        . Manage_Configs
         restore_Lister "${CloneDir}/Configs" ;  trap 'rm -f ${config_override}' EXIT
         list_Marker
        #  cat ${config_override}
        ask_confirm "${USER}"
        ./restore_fnt.sh
        Restore_Config "/tmp/Hyprdots-${UID}-BAK"
        rename_backup "_Hyprdots_restore_defaults"
        Hyprdots reload
        ;;
        # custom)
        # selected_line=$(cat ./restore_cfg.lst | awk -F '|' '{printf "%s|%s\n", $3, $4 }' | fzf -m --marker='Y' )
        # awk -F'|' -v lines="$selected_line" 'BEGIN{split(lines, a, "\n")} {for(i in a) if(index($0, a[i]) != 0) {$1 = "Y"; print; next} {$1 = "N"; print}}' ./restore_cfg.lst > ${config_override}
        # trap 'rm -f ${config_override}' EXIT
        # ./restore_cfg.lst.sh "BAK" "" ; bak=$(ls -td -- $BkpDir/* | head -n 1 )
        # echo -e "\e[33mProvide a Short Description for the Backup:[All]\e[0m"
        # read user_note; user_note=$(echo "$user_note" | tr ' ' '_'); note=${user_note:-"All"}
        # mv "$bak" "$bak--$note"
        # ;;
        Clone) #? Restores Dots from a Clone Repository
        Manage_Configs "$1" "$2"
        rename_backup "_Hyprdots_restore_Clone"
        ;;
        BackUp) #? Restores Dots to a previous state.
            trap PreserveCloneDir EXIT
            Manage_Configs "${@}"
        ;;
        config) #? Use the control list to Manage Dots : '~/.config/hyprdots-ctl/manage_cfg.lst'
            Manage_Configs "$1"
            rename_backup "_Hyprdots_restore_config"
        ;;
        link) #? Links a Clone Directory. Useful if you want to change your CloneDir
        repo_info
        ( check_Ping && print_prompt -w "Fetching updates" && git fetch )  ||  true
        set_branch            
            shift ; [[ -z "${1}" ]] && echo "Missing /path/to/CloneDir/*.: ${1}" && exit 1     
            new_CloneDir=${1}  
            [[ ! -d ${new_CloneDir} ]] && { print_prompt -r "INVALID:" -w "${new_CloneDir} not a directory" && exit 1 ;}    
            [[ ! -e ${new_CloneDir}/Configs/.config/hyprdots/scripts/globalcontrol.sh ]] && { print_prompt -r "MISSING:" -w "  ./Configs/.config/hyprdots/scripts/globalcontrol.sh" && exit 1 ;}
            [[ ! -e ${new_CloneDir}/Scripts/global_fn.sh ]] && { print_prompt -r "MISSING:" -w "./Configs/global_fn.sh " && exit 1 ;}        
            cd "${new_CloneDir}/Scripts" || { print_prompt -r "ERROR:" -w " cd ${new_CloneDir}" && exit 1 ;}    
            ./restore_lnk.sh
            Hyprdots reload
        ;;
        *)  Parameters "$Function"  ;;
  esac
}

backup() { #? Backing up commands 
            trap PreserveCloneDir EXIT
    case $1 in 
        all) #? Backs up the current configuration.
            Manage_Configs "$1"
            ;;
        # custom)
        #     Manage_Configs "$1"
        # ;;
        revert) #? Revert to a Previous Backup run by 'Hyprdots backup all'.
        barLine
            Manage_Configs "$1"
        barLine
        Hyprdots reload
            ;;
        list) #? List the backup
        Manage_Configs "list_Backup"
        ;;
        clean) #? Clear some Storage by Deleting old backups. 
            Manage_Configs "$1"
        ;;
        *)  Parameters "$Function"  ;;
    esac
}


cache() { #? Manages Hyprdots' Cache 
    case $1 in 
      reload) #? Reload Wallpaper Cache.
            shift
            [[ -z ${*} ]] && print_prompt -y "NOTE: Append the 'Theme-Name' to reload specific theme"
             ./create_cache.sh "${@}" 
         ;;
      rebuild) #? Force rebuild cache
            read -n 1 -s -r -p "[ENTER:yes ANY:no] Force Rebuild Cache, Proceed? " key ; [[ -z "$key" ]] || exit 0 
            echo ""
            ./create_cache.sh -f
         ;;
        *)
        Parameters "$Function" 
         ;;
    esac
}

sync() { #? Apply your Prefered Configuration defined at ~/.config/hyprdots-ctl/hyprdots.conf  
if [ $# -eq 0 ]; then
echo "Usage: Hyprdots sync [options]"
Parameters "$Function"
exit 0
        fi
    for arg in "$@"; do
        case $arg in
            waybar_ctl) #? Restore User waybar control file
                User_Sync "$arg"
                ;;
            theme_patch) #? Restore Patched custom themes
                User_Sync "$arg"                
                ;;
            Code) #? Restore $USER Vscode config file
                User_Sync "$arg"
                ;;
            kitty) #? Restore $USER kitty.conf file
                User_Sync "$arg"
                ;;
            kdeglobals)
                User_Sync "$arg"
                ;;
            *)  
            echo "Unknown [option]: $arg "
            echo "Usage: Hyprdots sync [options]"
                Parameters "$Function"
                ;;
        esac
    done
}


theme() { #? Theme Commands 
  # Function for managing themes
case $1 in 
        set) #? Set Theme
        sel_Theme=$( awk -F'|' '{print $2}' "${ThemeCtl}" | fzf )
        "${ScrDir}"/themeswitch.sh -s "$sel_Theme"
        ;;
        next) #? Next Theme
            "${ScrDir}"/themeswitch.sh -n
        ;; 
        prev) #? Previous Theme
            "${ScrDir}"/themeswitch.sh -p
        ;;
        select) #? Theme Selector
            "${ScrDir}"/themeselect.sh
        ;;
        patch) #? Patch A Theme from different repository.
           shift
            ./themepatcher.sh "$@"
        ;;
        *)  Parameters "$Function"  ;;

esac
}

wallpaper() { #? Wallpaper Commands
  case $1 in
        set) #? Set /Path/to/Wallpapers as new Wallpaper Directory
            shift
            cd - || exit
            if [[ -z "${*}" ]] ; then echo "Missing /Path/to/Wallpaper: ${*}" ; exit 1 ; fi
            "${ScrDir}"/swwwallpaper.sh -s "$1"
        ;;
        next) #? Next Wallppaer
            "${ScrDir}"/swwwallpaper.sh -n 
        ;;
        prev) #? Previous Wallpaper
            "${ScrDir}"/swwwallpaper.sh -p
        ;;
        select) #? Wallpaper Selector
            "${ScrDir}"/swwwallselect.sh
        ;;
        path) #? Current Theme will follow /path/to/wallpaper/* as its wallpaper directory 
                shift ; [[ -z "${1}" ]] && echo "Missing /path/to/wallpaper/*.: ${1}" && exit 1                                  
                ./create_cache.sh -c "$1"*
        ;;
        variety) #? EXPERIMENTAL! Use variety package to manage wallpapers.
            shift
            /usr/lib/hyprdots-ctl/Run_Wallpaper "${@}"
        ;;
        *)  Parameters "$Function"  ;;

esac
}


wallbash() { #? Toggle to use wallpaper accent themes .
  case $1 in 
        toggle) #? Toggle Wallbash On/Off
            "${ScrDir}/wallbashtoggle.sh"
        ;;
        # term) #? Toogle Terminal colors into some presets
        #     /usr/lib/hyprdots-ctl/Manage_Wallbash "${@}"
        # ;;
        kitty) #? Toogle 'kitty'
            /usr/lib/hyprdots-ctl/Manage_Wallbash "${@}"
        ;;
        waybar) #? Toogle 'waybar'
            /usr/lib/hyprdots-ctl/Manage_Wallbash "${@}"
        ;;
        spotify) #? Toogle 'spotify'
            /usr/lib/hyprdots-ctl/Manage_Wallbash "${@}"
        ;;
        *)  Parameters "$Function"  ;;
esac
}

waybar() { #? Waybar commands
    case $1 in
        control) #? Edit waybar Control File.
            ACTION="notify-send -a \"Hyprdots\" \"Waybar Updated\" ; ${ScrDir}/wbarconfgen.sh ; killall waybar 2> /dev/null ; $(which waybar) > /dev/null 2>&1 & disown "
            ConfigCtl "$HOME/.config/waybar/config.ctl" "$ACTION"
            ;;
        *)
            Parameters "$Function" 
            ;;
    esac
}


sddm() { #? Sddm commands.
  case $1 in 
        theme) #? Select Sddm Theme
        sddm_bak=/etc/sddm.conf.d/kde_settings.t2.bkp
        sddm_conf=/etc/sddm.conf.d/kde_settings.conf
        sddm_theme_list=("Candy" "Corners")

        sddm_theme="$(for theme in "${sddm_theme_list[@]}"; do
            echo -e "$theme"
        done | fzf --prompt='Please select your sddm theme...' )"
        [ -z "${sddm_theme}" ] && print_prompt -r  "Operation Cancelled" && exit 0
        print_prompt -y "Setting into '${sddm_theme} theme'..."
        ask_confirm "${USER}"
        [ -f "${sddm_bak}" ] && sudo rm "${sddm_bak}"  
        sudo tar -xzf ${CloneDir}/Source/arcs/Sddm_${sddm_theme}.tar.gz -C /usr/share/sddm/themes/
        sudo touch "${sddm_conf}"
        sudo cp "${sddm_conf}" "${sddm_bak}"
        sudo cp /usr/share/sddm/themes/${sddm_theme}/kde_settings.conf /etc/sddm.conf.d/
        ;;
          set) #? Directory   Lockscreen
        :    #  "${ScrDir}"/sddmwall.sh
        # 
          ;;
        *)  Parameters "$Function"  ;;

esac
}

shell() { #? Shell commands

case $1 in 
        select) #? Shell selector
#TODO for now the original script requires deletion of 1 of the shell to change shell therefore I should create a different approach
        myShell="$(echo -e "zsh\nfish" | fzf --prompt='Select shell: ')"
        echo "${myShell}"

        if [ "${myShell}" == "zsh" ];then       
            CHECK zsh oh-my-zsh-git 
            # add zsh plugins            
                # set variables
                Zsh_rc="${ZDOTDIR:-$HOME}/.zshrc"
                Zsh_Path="/usr/share/oh-my-zsh"
                Zsh_Plugins="$Zsh_Path/custom/plugins"
                Fix_Completion=""
            
                # generate plugins from list
                while read r_plugin
                do
                    z_plugin=$(echo $r_plugin | awk -F '/' '{print $NF}')
                    if [ "${r_plugin:0:4}" == "http" ] && [ ! -d $Zsh_Plugins/$z_plugin ] ; then
                        sudo git clone $r_plugin $Zsh_Plugins/$z_plugin
                    fi
                    if [ "$z_plugin" == "zsh-completions" ] && [ `grep 'fpath+=.*plugins/zsh-completions/src' $Zsh_rc | wc -l` -eq 0 ]; then
                        Fix_Completion='\nfpath+=${ZSH_CUSTOM:-${ZSH:-/usr/share/oh-my-zsh}/custom}/plugins/zsh-completions/src'
                    else
                        w_plugin=$(echo ${w_plugin} ${z_plugin})
                    fi
                done < <(cut -d '#' -f 1 "./restore_zsh.lst" | sed 's/ //g')
            
                # update plugin array in zshrc
                print_prompt -y "[SHELL]" -w " intalling plugins (${w_plugin})"
                sed -i "/^plugins=/c\plugins=($w_plugin)$Fix_Completion" $Zsh_rc
        
        elif [ "${myShell}" == "fish" ];then   
            config_override="/tmp/Hyprdots-${UID}-BAKmanage_cfg.lst"    
            CHECK fish lsd starship
            (
            echo 'S|${HOME}/.config|fish|fish'  
            echo 'S|${HOME}/.config|lsd|lsd'
            ) > ${config_override}
            Restore_Config --only "/tmp/Hyprdots-${UID}-BAK"
        fi
        # set shell
        [ -z ${myShell} ] && print_prompt -r "Operation Cancelled" && exit 0
        if [[ "$(grep "/${USER}:" /etc/passwd | awk -F '/' '{print $NF}')" != "${myShell}" ]] ; then
            print_prompt -y "[SHELL] " -w "changing shell to ${myShell}..."
            chsh -s "$(which ${myShell})"
        else
            print_prompt -g "[SKIP]" -w "${myShell} is already set as shell..."
        fi            
        ;;

        *)Parameters "$Function" 
         ;;
    esac
}

power() { #? Power Options

    case $1 in 
        reset) #? Reset Changes.
            Power_Manager "$@"
        ;;     
        save) #? Save Power by disabling features
            Power_Manager "$@"
         ;;
        unset) #? Unset specific changes
            Power_Manager  "$@"
        ;;
        game) #? Toggle Game mode
            Power_Manager  "$@"
        ;;
        *)Parameters "$Function" 
         ;;
    esac

}

code() { #? Modify Vscode Extensions
case $1 in 
         select) #? Selector for default Theme presets

select_theme() {
            dir=$( grep "^1|" "${ThemeCtl}" | cut -d'|' -f3 | cut -d'~' -f1 | tr '[:upper:]' '[:lower:]')
        code_SubExt=$(cat $HOME/.vscode/extensions/"${dir}"*/package.json | jq -r '.contributes.themes[] | .label' | fzf )
        awk -v ext="${code_SubExt}" -F'|' 'BEGIN {OFS = FS} /^1\|/ {if ($3 ~ /~/) sub(/~[^|]*/, "~" ext, $3); else $3 = $3 "~" ext} 1' "$ThemeCtl" > temp && mv temp "$ThemeCtl"
            if [ "$(grep -c "workbench.colorTheme" "${ConfDir}"/Code/User/settings.json)" -eq 1 ] ; then sed -i "/workbench.colorTheme/c\    \"workbench.colorTheme\": \"${code_SubExt}\"," "${ConfDir}"/Code/User/settings.json
            else sed -i "/^{/a\    \"workbench.colorTheme\": \"${code_SubExt}\"," "${ConfDir}"/Code/User/settings.json
            fi
}
if [[ ! -z "$(cat "${ThemeCtl}" | grep "^1|" | cut -d'|' -f3)" ]]; then select_theme
else echo "No Linked Code Extension found. Would you like to add the extension MANUALLY?"
    ask_confirm ; sel_ext=$(/usr/bin/code --list-extensions | fzf)   
    sed -i '/^1|/ s/[^|]*|[^|]*|[^|]*/&'"$sel_ext"'/' "$ThemeCtl"
     select_theme
fi
         ;;
        *)
        Parameters "$Function" 
         ;;
    esac
}

show() { #? Some Hypr GUI you might want to use.
    
    case $1 in 
        monitors) #? Manages Monitors using nwg-displays
            Monitor_Manager
        ;;
        binds) #? Show Keybindings Hints (Click to execute)
            # Keybinds_Hint #! Moved to .extra 
            "${ScrDir}"/keybinds_hint.sh
        ;;
        emoji) #? Show Emojis
            Launch_Emoji
        ;;
        pastebin) #? Show pastebin 
            shift
            Launch_Pastebin "$@"
        ;;
        screencap) #? Experimental! Rofi will conflict. Will use yad in the future
            Launch_Screencap
        ;;
        glyph) #? Show Glyph selection * Be sure to have Nerd Fonts installed
            Launch_Glyph
        ;;
        # panel) #? Notifications Panel
        #     Launch_Swaync
        # ;;
        *)Parameters "$Function" 
         ;;

    esac
}

run() { #? Executables

    case $1 in 
        events) #? Watches hyprland events and executes actions
            Hypr_Events
        ;;
        screencap) #? Screenshot and Screenrecord Tool
            shift
            Run_Screencap "$@"
        ;;
        *)Parameters "$Function" 
         ;;

    esac

}

inject() { #? Some of Scripts you might want to use.

    case $1 in 
      chaotic) #? install Chaotic AUR 
        shift
          sudo /usr/lib/hyprdots-ctl/Install_ChaoticAUR "${@}"
         ;;
        *)
        Parameters "$Function" 
         ;;
    esac

}

reload() { #? Just Reload 
    box_me "Dots reloaded"
    ${ScrDir}/themeswitch.sh -s "$(cat "${ThemeCtl}" | grep "^1" | cut -d '|' -f2)" || true
    killall waybar || true
    $(which waybar) > /dev/null 2>&1 &

}






#! +----------------------------------------------------------------|
"$@" #? Call the appropriate Function based on the first argument.  |
#! +----------------------------------------------------------------|
