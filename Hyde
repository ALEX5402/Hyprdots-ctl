#!/bin/env bash

if [ "$(whoami)" = "root" ] || [ "$(id -u)" -eq 0 ]; then
    echo "Oh no! What have you done! Hyde-cli is design for 'user' space ONLY ...EXITING"
    exit 1
fi

export PATH=$PATH:/usr/lib/hyde-cli/

hyde_cli_version=$(cat /etc/hyde-cli/.hyde-cli.ver | head -1)

# . DEVEL
. GLOBAL-hyde
. FUNCTIONS-hyde
initiate_hyde_command

#! +----------------------------------------------------------------|
#? Add functions below this section.
#? Be careful with spaces in your Function definitions.
#? Example Function:
#* |Function example() { #? Example Function. this comments supports '\n'
#* | case $1 in
#* |      # Cases go here...
#* |   esac
#* |}
#! +----------------------------------------------------------------|

man() { #? Show Manual
    . "${meta_file}" 2>/dev/null || print_prompt -r "Looks like you did not run 'Hyde-install'! "
    manPage=$(
        echo -e "Hyde-cli: ${hyde_cli_version}\nHyde Clone Directory: ${CloneDir}\nUsage: Hyde [Function] [options]\n"
        grep -E '^\w+ *\( *\)\s*\{ #\?' $0 | while read -r line; do
            Function=$(echo "$line" | awk 'BEGIN { FS = "[()#?]" } { print $1 }')
            desc=$(echo "$line" | awk 'BEGIN { FS = "[()#?]" } { gsub(/\\n/, "\\n\t\t\t", $5); print $5 }')
            printf " \n%-45s %s\n\n" "$(print_prompt -y "[" -w "${Function}" -y "]")" "$(print_prompt -y "﬌${desc}")"
            Parameters "${Function}"
        done
    )
    box_me "Manual Page"
    echo -e "${manPage}" |
        sed -e "s|\${CloneDir}|$CloneDir|g" \
            -e "s|\${HOME}|${HOME}|g" \
            -e "s|\${ctlFile}|$ctlFile|g"

}

version() { #? Hyde-cli Version

    cat <<EOF
       ░▒▒▒▒▒▒▒░░░
     ░░▒▒▒▒▒▒░░░░▓▓          ____________
    ░░▒▒▒▒▒░░░░░▓▓        //____________/
   ░░░▒▒▒░░░░░░▓▓     _   _ _     _ ______
   ░░░▒▒▒░░░░░▓▓▓▓▓▓ | | | | |   | |  ___/
    ░░░▒▒░░░░▓▓   ▓▓ | |_| | |__/ /| |_____
     ░░░▒▒░░▓▓   ▓▓   \__  |_____/ |______/
       ░░▒▒▓▓   ▓▓  //____/
EOF

    box_me -s "Hyde-cli Version" -c 77
    barLine
    cat /etc/hyde-cli/.hyde-cli.ver
    barLine
    {
        . "${meta_file}" 2>/dev/null && box_me -s "Hyde Version" -c 154 && barLine
        repo_info
        barLine
        inform_updates
    } || print_prompt -r "Looks like you did not run 'Hyde-install'! "
}

systeminfo() { #? System Information
    print_prompt -y "**Hyde-cli Version:**"
    cat /etc/hyde-cli/.hyde-cli.ver

    print_prompt -y "\n**Hyde Repository:**"
    repo_info

    print_prompt -y "\n**GPU:** "
    lspci -nn | grep -Ei "VGA|3d"

    print_prompt -y "\n**CPU:** "
    lscpu | awk -F': ' '/Model name/ {gsub(/^ *| *$| CPU.*/,"",$2); print $2}'

    print_prompt -y "\n**OS:** "
    cat /etc/os-release

    print_prompt -y "\n**Hyprland System Information:** (Not always available)"
    hyprctl systeminfo
}

branch() { #? Set pref Hyde branch
    repo_info
    set_branch
}

update() { #? Pull Updates From Hyde Repository
    trap 'rm -f "${cacheDir}/landing/update.check"' EXIT
    repo_info
    get_aurhlpr
    print_prompt -y "Pulling Hyde repo..."
    git stash >/dev/null
    git pull
    git stash pop 2>/dev/null
    print_prompt -y "Checking Hyde CLI updates..."
    curl -sL https://raw.githubusercontent.com/kRHYME7/Hyde-cli/master/install.sh | bash
    inform_updates
}

upgrade() { #? Upgrades dots from the Repository  \n ﯧ Control file: '${ctlFile}'
    repo_info
    ask_confirm
    Manage-Config "upgrade"
    rename_backup "_Hyde_upgrade"
}

restore() { #? Restore Dots
    navigate_clone
    case $1 in
    Config) #? Only restores Dots from default '${CloneDir}/Configs'.
        shift
        box_me "Restoring Dots"
        repo_info
        # ask_confirm
        . Manage-Config
        list_Marker
        #  cat ${config_override}
        ask_confirm "${USER}"
        ./restore_fnt.sh
        Restore-Config --only "/tmp/Hyde-$(id -u)-BAK"
        set_metadata
        rename_backup "_Hyde_restore_Configs"
        Hyde reload
        ;;
    Clone) #? Restores Dots from a Clone Repository. \n ﯧ Provide ~/path/to/clone/directory
        Manage-Config "$1" "$2" && rename_backup "_Hyde_restore_Clone"
        #? Meta is added inside Clone function
        ;;

    BackUp) #? Restores Dots from previous Backup.\n   Files might not be complete\n ﯦ You can Cherry pick a file/dir from a backup
        Manage-Config "${@}"
        ;;
    Link) #? Links a Clone Directory. Useful if you want to change your CloneDir
        repo_info
        set_branch
        shift
        new_CloneDir=${1}
        [[ -z "${1}" ]] && new_CloneDir=${CloneDir} && print_prompt -r "Missing /path/to/CloneDir"
        integrity_check
        print_prompt -y "\n[LINKING]:" -w "${CloneDir}"
        ask_confirm
        set_metadata "${new_CloneDir}"
        Hyde reload
        ;;
    *) Parameters "$Function" ;;
    esac
}

backup() { #? Backing up commands
    navigate_clone
    case $1 in
    all) #? Backs up the current configuration.
        Manage-Config "$1"
        ;;
    # custom)
    #     Manage-Config "$1"
    # ;;
    revert) #? Revert to a Previous Backup run by 'Hyde backup all'. \n ﯦ Different from 'Hyde restore Backup', this command will restore the explicit backups like a snapshot
        Manage-Config "$1"
        ;;
    list) #? List the backup
        Manage-Config "list_Backup"
        ;;
    clean) #? Clear some Storage by Deleting old backups.
        Manage-Config "$1"
        ;;
    *) Parameters "$Function" ;;
    esac
}

cache() { #? Manages Hyde' Cache
    case $1 in
    reload) #? Reload Wallpaper Cache.
        shift
        # [[ -z ${*} ]] && print_prompt -y "NOTE: Append the 'Theme-Name' to reload specific theme"
        swwwallcache.sh "${@}"
        ;;
    rebuild) #? Force rebuild cache
        read -n 1 -s -r -p "[ENTER:yes ANY:no] Force Rebuild Cache, Proceed? " key
        [[ -z "$key" ]] || exit 0
        echo ""
        swwwallcache.sh -f
        ;;
        #          wall)
        # :
        #          ;;
    #  theme) #? Generate cache for current Theme
    #     swwwallcache.sh -t
    #  ;;
    *)
        Parameters "$Function"
        ;;
    esac
}

sync() { #? Overwrite current dots from a

    userDir=${userDir:-${HOME}/.config/hyde/user}

    # Find all files in the userDir, remove the directory prefix, and create hard links in $HOME
    find "$userDir" -type f | while read -r file; do
        # Remove the directory prefix from the file path
        relativePath=$(echo "$file" | sed "s|^$userDir/||")
        # Extract the directory part of the relative path
        targetDir="$HOME/$(dirname "$relativePath")"
        # Check if the target directory exists, and create it if it doesn't
        if [ ! -d "$targetDir" ]; then
            # mkdir -p "$targetDir"
            echo "$targetDir does not exist... Skipping"
            break
        fi
        # Create the hard link in $HOME
        ln -f "$file" "$HOME/$relativePath"
    done
}

theme() { #? Theme Commands
    # Function for managing themes
    case $1 in
    set) #? Set Theme
        sel_Theme=$(ls $themeDir | fzf)

        "${scrDir}"/themeswitch.sh -s "$sel_Theme"
        ;;
    next) #? Next Theme
        "${scrDir}"/themeswitch.sh -n
        ;;
    prev) #? Previous Theme
        "${scrDir}"/themeswitch.sh -p
        ;;
    select) #? Theme Selector
        "${scrDir}"/themeselect.sh
        ;;
    patch) #? Patch A Theme from different repository.\nﯦ Invoking without args will launch a menu from Hyde-gallery DB.
        shift
        navigate_clone
        if [[ -z "${*}" ]]; then
            Manage-Themes theme_patcher
        else
            ./themepatcher.sh "$@"
        fi
        ;;
    # remove) #? Removes a theme from the system.  Unrecoverable
    # :

    # ;;
    *) Parameters "$Function" ;;

    esac
}

wallpaper() { #? Wallpaper Commands
    case $1 in
    set) #? Set /Path/to/Wallpapers as new Wallpaper Directory
        print_prompt -r "[deprecated] " -y "add 'wallAddCustomPath=( \"path/to/wallpapers\" \"...\" )' in '${hydeConfDir}/hyde.conf' instead."
        #! shift
        #! cd - || exit
        #! if [[ -z "${*}" ]] ; then echo "Missing /Path/to/Wallpaper: ${*}" ; exit 1 ; fi
        #! "${scrDir}"/swwwallpaper.sh -s "$1"
        ;;
    next) #? Next Wallppaer
        "${scrDir}"/swwwallpaper.sh -n
        ;;
    prev) #? Previous Wallpaper
        "${scrDir}"/swwwallpaper.sh -p
        ;;
    select) #? Wallpaper Selector
        "${scrDir}"/swwwallselect.sh
        ;;
    # variety) #? EXPERIMENTAL! Use variety package to manage wallpapers.
    #     shift
    #     /usr/lib/hyde-cli/Run-Wallpaper "${@}"
    # ;;
    *) Parameters "$Function" ;;

    esac
}

wallbash() { #? Toggle to use wallpaper accent themes .
    case $1 in
    toggle) #? Cycles Wallbash [0] off [1] auto [2] dark [3] light
        "${scrDir}/wallbashtoggle.sh"
        ;;
    mode) #? Set wallbash mode. [0] [1] [2] [3]
        shift
        num_val=${1:-$enableWallDcol}
        declare -A actionMap=(
            [0]="wallbash disabled"
            [1]="wallbash auto"
            [2]="wallbash dark mode"
            [3]="wallbash light mode"
        )
        # TgtScr="$scrDir/globalcontrol.sh"
        TgtScr="${hydeConfDir}/hyde.conf"

        if [[ -n "${actionMap[$num_val]}" ]]; then
            sed -i "/^enableWallDcol/c\enableWallDcol=${num_val:-${enableWallDcol}}" "${TgtScr}"
            . "$scrDir/globalcontrol.sh"
            notif="${actionMap[$num_val]}"
            echo "$notif"
        else
            echo "Invalid numeric value: $num_val"
            exit 0
        fi
        "${scrDir}/swwwallbash.sh" "$(readlink "${hydeThemeDir}/wall.set")"
        notify-send -a "t1" -i "~/.config/dunst/icons/hyprdots.png" "${notif}"
        ;;

    # # term) #? Toogle Terminal colors into some presets
    # #   Manage-Wallbash "${@}"
    # # ;;
    # # kitty) #? Toogle 'kitty'
    #     Manage-Wallbash "${@}"
    # # ;;
    # # waybar) #? Toogle 'waybar'
    #     Manage-Wallbash "${@}"
    # # ;;
    # # spotify) #? Toogle 'spotify'
    #     Manage-Wallbash "${@}"
    # # ;;
    *) Parameters "$Function" ;;
    esac
}

waybar() { #? Waybar commands
    case $1 in
    control) #? Edit waybar Control File.
        ACTION="notify-send -a \"Hyde\" \"Waybar Updated\" ; ${scrDir}/wbarconfgen.sh ; killall waybar 2> /dev/null ; $(which waybar) > /dev/null 2>&1 & disown "
        ConfigCtl "${HOME}/.config/waybar/config.ctl" "$ACTION"
        ;;
    *)
        Parameters "$Function"
        ;;
    esac
}

sddm() { #? Sddm commands.
    navigate_clone
    case $1 in
    theme) #? Select Sddm Theme
        sddm_bak=/etc/sddm.conf.d/kde_settings.t2.bkp
        sddm_conf=/etc/sddm.conf.d/kde_settings.conf
        sddm_theme_list=("Candy" "Corners")

        sddm_theme="$(for theme in "${sddm_theme_list[@]}"; do
            echo -e "$theme"
        done | fzf --prompt='Please select your sddm theme...')"
        [ -z "${sddm_theme}" ] && print_prompt -r "Operation Cancelled" && exit 0
        print_prompt -y "Setting into '${sddm_theme} theme'..."
        ask_confirm "${USER}"
        [ -f "${sddm_bak}" ] && SUPER rm "${sddm_bak}"
        SUPER tar -xzf ${CloneDir}/Source/arcs/Sddm_${sddm_theme}.tar.gz -C /usr/share/sddm/themes/
        SUPER touch "${sddm_conf}"
        SUPER cp "${sddm_conf}" "${sddm_bak}"
        SUPER cp /usr/share/sddm/themes/${sddm_theme}/kde_settings.conf /etc/sddm.conf.d/
        ;;
    #   set) #? Directory   Lockscreen
    # :    #  "${scrDir}"/sddmwall.sh
    # #
    #   ;;
    *) Parameters "$Function" ;;

    esac
}

shell() { #? Shell commands

    case $1 in
    select) #? Shell selector
        shell_select
        ;;

    *)
        Parameters "$Function"
        ;;
    esac
}

power() { #? Power Options

    case $1 in
    reset) #? Reset Changes.
        Manage-Power "$@"
        ;;
    save) #? [*] Save Power by disabling features
        Manage-Power "$@"
        ;;
    unset) #? [*] Unset specific changes
        Manage-Power "$@"
        ;;
    game) #? Toggle Game mode
        Manage-Power "$@"
        ;;
    *)
        Parameters "$Function"
        ;;
    esac

}

code() { #! Modify Vscode Extensions
    case $1 in
    select) #? Selector for default Theme presets

        select_theme() {
            dir=$(grep "^1|" "${ThemeCtl}" | cut -d'|' -f3 | cut -d'~' -f1 | tr '[:upper:]' '[:lower:]')
            code_SubExt=$(cat ${HOME}/.vscode/extensions/"${dir}"*/package.json | jq -r '.contributes.themes[] | .label' | fzf)
            awk -v ext="${code_SubExt}" -F'|' 'BEGIN {OFS = FS} /^1\|/ {if ($3 ~ /~/) sub(/~[^|]*/, "~" ext, $3); else $3 = $3 "~" ext} 1' "$ThemeCtl" >temp && mv temp "$ThemeCtl"
            if [ "$(grep -c "workbench.colorTheme" "${confDir}"/Code/User/settings.json)" -eq 1 ]; then
                sed -i "/workbench.colorTheme/c\    \"workbench.colorTheme\": \"${code_SubExt}\"," "${confDir}"/Code/User/settings.json
            else
                sed -i "/^{/a\    \"workbench.colorTheme\": \"${code_SubExt}\"," "${confDir}"/Code/User/settings.json
            fi
        }
        if [[ ! -z "$(cat "${ThemeCtl}" | grep "^1|" | cut -d'|' -f3)" ]]; then
            select_theme
        else
            echo "No Linked Code Extension found. Would you like to add the extension MANUALLY?"
            ask_confirm
            sel_ext=$(/usr/bin/code --list-extensions | fzf)
            sed -i '/^1|/ s/[^|]*|[^|]*|[^|]*/&'"$sel_ext"'/' "$ThemeCtl"
            select_theme
        fi
        ;;
    *)
        Parameters "$Function"
        ;;
    esac
}

show() { #? Some Hypr GUI you might want to use.
    case $1 in
    # monitors) #? Manages Monitors using nwg-displays
    #     Manage_Monitor
    # ;;
    binds) #? Keybind Hints ﯧ Click to execute
        # Keybinds_Hint #! Moved to .extra
        "${scrDir}"/keybinds_hint.sh
        ;;
    emoji) #? Emoji Selector \n ﯧ pass (only once) '--ignore=initialclass' to disable autopaste
        [[ $* == *"--ignore"* ]] && pasteIt "${*}"
        Launch-Emoji
        ;;
    pastebin) #? Pastebin manager \n ﯧ pass [only once] '--ignore=initialclass' to disable autopaste
        [[ $* == *"--ignore"* ]] && pasteIt "${*}"
        shift
        Launch-Pastebin "$@"
        ;;
    glyph) #? Glyph selector \n ﯧ Requires Nerd Fonts \n ﯧ pass [only once] '--ignore=initialclass' to disable autopaste
        [[ $* == *"--ignore"* ]] && pasteIt "${*}"
        Launch-Glyph
        ;;
    screencap) #? Use rofi to select screenshot options \n  kills another rofi session
        Launch-Screencap
        ;;
    *)
        Parameters "$Function"
        ;;

    esac
}

run() { #? Executables

    case $1 in
    events) #? Watches hyprland events and executes actions
        Hypr-Events
        ;;
    screencap) #? Screenshot and Screenrecord Tool
        shift
        Run-Screencap "$@"
        ;;
    *)
        Parameters "$Function"
        ;;

    esac

}

inject() { #? User/Device specific scripts that might be useful.

    case $1 in
    chaotic) #? install Chaotic AUR
        shift
        SUPER /usr/lib/hyde-cli/Install-chaotic-aur "${@}"
        ;;
    # asus_patch)
    # # Add Keys of ASUS Repository
    # pacman-key --recv-keys 8F654886F17D497FEFE3DB448B15A6B0E9A3FA35
    # pacman-key --finger 8F654886F17D497FEFE3DB448B15A6B0E9A3FA35
    # pacman-key --lsign-key 8F654886F17D497FEFE3DB448B15A6B0E9A3FA35
    # pacman-key --finger 8F654886F17D497FEFE3DB448B15A6B0E9A3FA35

    # # Add in pacman.conf
    # echo -e "\n[g14]\nServer = https://arch.asus-linux.org" | SUPER tee -a /etc/pacman.conf

    # CHECK asusctl supergfxctl rog-control-center power-profiles-daemon

    # #Check First before enabling
    # service_check power-profiles-daemon.service supergfxd
    # ;;
    # test)
    # service_check sddm
    # ;;
    *)
        Parameters "$Function"
        ;;
    esac

}

reload() { #? Just Reload
    if printenv HYPRLAND_INSTANCE_SIGNATURE &>/dev/null; then
        box_me "Reloading Dots"
        "$HOME/.local/share/bin/swwwallcache.sh" -t ""
        { [ -n "$hydeTheme" ] && "${scrDir}/themeswitch.sh" -s "$hydeTheme"; } || "${scrDir}/swwwallcache.sh"
    fi
}

#! +----------------------------------------------------------------|
"$@" #? Call the appropriate Function based on the first argument.  |
#! +----------------------------------------------------------------|
