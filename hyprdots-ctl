 export PATH=$PATH:/usr/lib/hyprdots-ctl/

export PATH=$PATH:$HOME/GitHub/Hyprdots-ctl/Scripts/ #! test

source init_fn.sh
#! +----------------------------------------------------------------|
#? Add functions below this section.
#? Be careful with spaces in your Function definitions.
#? Example Function:
#* |Function example() { #? Example Function.
#* | case $1 in
#* |      # Cases go here...
#* |   esac
#* |}
#! +----------------------------------------------------------------|

man() { #? Show Manual 
echo "CloneDirectory: $CloneDir"
  echo -e "Usage: hyprdots-ctl [Function] [Arguments] [Parameters]"
  echo ""
  grep -E '^\w+ *\( *\)\s*\{ #\?' $0 | while read -r line; do
    Function=$(echo "$line" | awk 'BEGIN { FS = "[()#?]" } { print $1 }')
    desc=$(echo "$line" | awk 'BEGIN { FS = "[()#?]" } { print $5 }')
printf "  %-20s %s\n" "[$Function]" "*$desc"
      Parameters "$Function"
       done
}

update() { #? Pull Updates From Hyprdots Repository 
echo "CloneDirectory: $CloneDir"
git stash > /dev/null ; git pull ; git stash pop 2> /dev/null 
rm -f "/tmp/hyprdots_update_check"
  }

install() { #? Installs Hyprdots

    case $1 in
        fresh) #? Fresh installation of Hyprdots
            ./install.sh
            ;;
        custom) #? Custom installation of Apps
        echo "Fresh installation plus custom apps... Press any key to Proceed..."
        ConfigCtl "$CloneDir/Scripts/custom_apps.lst" "$ACTION"
        echo "List of packages to be installed:"
        grep -v '^#' ./custom_apps.lst
            read -n 1 -s -r -p "[ENTER/SPACE:yes ANY:no] Proceed? " key ; [[ -z "$key" ]] || exit 0 
            ./install.sh ./custom_apps.lst
            ;;
            *)
            echo "$(Parameters "${Function}" )"
            ;;
    esac
}

restore() { #? Restore Hyprdots Configurations
  case $1 in 
        defaults) #? Restore to Default Configurations of Hyprdots
            ./install.sh -r
        ;;

        *)
         echo "$(Parameters "${Function}" )"
        ;;
  esac
}

theme() { #? Theme Related Actions 
  # Function for managing themes
case $1 in 
        set) #? Set Theme
        SelectOption "$(cat $ThemeCtl | awk -F'|' '{print $2}')"
        $ScrDir/themeswitch.sh -s "$selected"
        ;;
        next) #? Next Theme
            $ScrDir/themeswitch.sh -n
        ;; 
        prev) #? Previous Theme
            $ScrDir/themeswitch.sh -p
        ;;
        select) #? Theme Selector
            $ScrDir/themeselect.sh
        ;;
        patch) #? Patch A Theme from different repository.
           shift
            ./themepatcher.sh "$@"
        ;;
        *)
         echo "$(Parameters "${Function}" )"
        ;;
esac
}

wallpaper() { #? Wallpaper related Actions
  case $1 in 
        set) #? Set /Path/to/Wallpaper as Wallpaper
            shift
            if [ -z "$@" ]; then echo "Missing: /Path/to/Wallpaper" ; exit 1 ; fi
            $ScrDir/swwwallpaper.sh -s "$@"
        ;;
        next) #? Next Wallppaer
            $ScrDir/swwwallpaper.sh -n 
        ;;
        prev) #? Previous Wallpaper
            $ScrDir/swwwallpaper.sh -p
        ;;
        select) #? Wallpaper Selector
            $ScrDir/swwwallselect.sh
        ;;
        *)
         echo "$(Parameters "${Function}" )"
        ;;
esac
}

sddm() { #? Sddm Things
  # Function for managing SDDM settings
  echo "Setting SDDM with Parameters: $@"
  case $1 in 
        set) #? Set active Wallpaper to Sddm Lockscreen
            $ScrDir/sddmwall.sh
        ;;
        *)
         echo "$(Parameters "${Function}" )"
        ;;
esac
}

wallbash() { #? Wallbash
  case $1 in 
        toggle) #? Toggle Wall bash On/Off
            $ScrDir/wallbashtoggle.sh
        ;;
        *)
         echo "$(Parameters "${Function}" )"
        ;;
esac
}

waybar() { #? Waybar related Things
    case $1 in
        control) #? Edit waybar Control File.
            ACTION="notify-send -a \"Hyprdots\" \"Waybar Updated\" ; $ScrDir/wbarconfgen.sh ; killall waybar 2> /dev/null ; $(which waybar) > /dev/null 2>&1 & disown "
            ConfigCtl "$HOME/.config/waybar/config.ctl" "$ACTION"
            ;;
        *)
            echo "$(Parameters "${Function}" )"
            ;;
    esac
}

code() { #? Modify Vscode Extensions
case $1 in 
         select) #? Selector for default Theme presets
        if [[ ! -z "$(cat $HOME/.config/hypr/theme.ctl | grep "^1|" | cut -d'|' -f3)" ]]; then
        dir=$(cat $ThemeCtl | grep "^1|" | cut -d'|' -f3 | cut -d'~' -f1 | tr '[:upper:]' '[:lower:]')
        SelectOption "$(cat $HOME/.vscode/extensions/"${dir}"*/package.json | jq -r '.contributes.themes[] | .label')"
        sed -i "/^1|/s|~[^|]*|~${selected}|" $ThemeCtl
            if [ "$(grep -c "workbench.colorTheme" $ConfDir/Code/User/settings.json)" -eq 1 ] ; then sed -i "/workbench.colorTheme/c\    \"workbench.colorTheme\": \"${selected}\"," $ConfDir/Code/User/settings.json
            else sed -i "/^{/a\    \"workbench.colorTheme\": \"${selected}\"," $ConfDir/Code/User/settings.json
            fi
        else echo "No Linked Code Extension found."
        fi
         ;;
        *)
        echo "$(Parameters "${Function}" )"
         ;;
    esac
}

cache() { #? Cache 
    case $1 in 
      reload) #? Reload Caches if you have new wallpapers.
            ./create_cache.sh
         ;;
      rebuild) #? Force rebuild cache
            read -n 1 -s -r -p "[ENTER:yes ANY:no] Force Rebuild Cache, Proceed? " key ; [[ -z "$key" ]] || exit 0 
            ./create_cache.sh -f
         ;;
        add) #? Cache custom /path/to/wallpaper/* ( Broken)
                if [[ -z $2 ]]; then
                    echo "Please provide a /path/to/wallpaper/*." 
                else
                ./create_cache.sh -c "$2"
        fi
        ;;
        *)
        echo "$(Parameters "${Function}" )"
         ;;
    esac
}










#! +----------------------------------------------------------------|
"$@" #? Call the appropriate Function based on the first argument.  |
#! +----------------------------------------------------------------|