#!/bin/bash
if [ "$(whoami)" = "root" ] || [ $(id -u) -eq 0 ] ; then echo "Oh no! What have you done! Run without 'sudo'...EXITING" ; exit 1 ;fi

export PATH=$PATH:/usr/lib/hyprdots-ctl/

hyprdots_ctl_version=$(cat /etc/hyprdots-ctl/.hyprdots-ctl.ver | head -1)

. DEVEL
. GLOBAL 
cd $ScriptDir || handle_error "Cannot Change Directory to $ScriptDir"
. FUNCTIONS 

#! +----------------------------------------------------------------|
#? Add functions below this section.
#? Be careful with spaces in your Function definitions.
#? Example Function:
#* |Function example() { #? Example Function.
#* | case $1 in
#* |      # Cases go here...
#* |   esac
#* |}
#! +----------------------------------------------------------------|

current_branch="Git Branch: '$(git branch --show-current)'"  

man() { #? Show Manual 
  manPage=$(
    echo -e "Hyprdots-ctl: ${hyprdots_ctl_version}\nHyprdots Clone Directory: "${CloneDir}"\nUsage: Hyprdots [Function] [options]\n"
    grep -E '^\w+ *\( *\)\s*\{ #\?' $0 | while read -r line; do
      Function=$(echo "$line" | awk 'BEGIN { FS = "[()#?]" } { print $1 }')
      desc=$(echo "$line" | awk 'BEGIN { FS = "[()#?]" } { print $5 }')
      printf "  %-20s %s\n" "[${Function}]" "*${desc}"
      Parameters "${Function}"
    done 
  ) 
  box_me "Manual Page"
  echo "${manPage}"
}

version() { #? Hyprdots-ctl Version
box_me -s "Hyprdots-ctl Version" -c 77
cat /etc/hyprdots-ctl/.hyprdots-ctl.ver
}

systeminfo() { #? System Information
echo -e "**Hyprdots-ctl Version:**"
cat /etc/hyprdots-ctl/.hyprdots-ctl.ver

echo -e "\n**Clone Directory:**\n${CloneDir}"

echo -e "\n**GPU:** "
lspci -nn | grep -Ei "VGA|3d"  

echo -e "\n**CPU:** "
lscpu | awk -F': ' '/Model name/ {gsub(/^ *| *$| CPU.*/,"",$2); print $2}'

echo -e "\n**OS:** "
cat /etc/os-release 

echo -e "\n**Hyprland System Information:** (Not always available)" 
hyprctl systeminfo
}

branch() { #? Set pref Hyprdots branch
( check_Ping && print_prompt -w "Fetching updates" && git fetch )  ||  true
set_branch
}

update() { #? Pull Updates From Hyprdots Repository 
echo "CloneDirectory: ${CloneDir}"
echo "${current_branch}"
git stash > /dev/null ; git pull ; git stash pop 2> /dev/null 
rm -f "/tmp/hyprdots_update_check"
  }

upgrade() { #? Upgrades dots from the Repository; Manage the control file : '~/.config/hyprdots-ctl/manage_cfg.lst'
    Manage_Configs "upgrade"
    rename_backup "_Hyprdots_upgrade"
}

restore() { #? Restore Hyprdots configs
  case $1 in 
        defaults) #? Restore to Default Dots of Hyprdots
        shift
        box_me "Overwriting Dots from ${CloneDir}"
        . Manage_Configs
         restore_Lister "${CloneDir}/Configs" ;  trap 'rm -f /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst' EXIT
         list_Marker
        #  cat /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst
        ask_confirm "${USER}"
        ./restore_fnt.sh
        Restore_Config "/tmp/Hyprdots-${UID}-BAK"
        rename_backup "_Hyprdots_restore_defaults"
        Hyprdots reload
        ;;
        # custom)
        # selected_line=$(cat ./restore_cfg.lst | awk -F '|' '{printf "%s|%s\n", $3, $4 }' | fzf -m --marker='Y' )
        # awk -F'|' -v lines="$selected_line" 'BEGIN{split(lines, a, "\n")} {for(i in a) if(index($0, a[i]) != 0) {$1 = "Y"; print; next} {$1 = "N"; print}}' ./restore_cfg.lst > /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst
        # trap 'rm -f /tmp/Hyprdots-${UID}-BAKmanage_cfg.lst' EXIT
        # ./restore_cfg.lst.sh "BAK" "" ; bak=$(ls -td -- $BkpDir/* | head -n 1 )
        # echo -e "\e[33mProvide a Short Description for the Backup:[All]\e[0m"
        # read user_note; user_note=$(echo "$user_note" | tr ' ' '_'); note=${user_note:-"All"}
        # mv "$bak" "$bak--$note"
        # ;;
        Clone) #? Restores Dots from a Clone Repository
        Manage_Configs "$1" "$2"
        rename_backup "_Hyprdots_restore_Clone"
        ;;
        BackUp) #? Restores Dots to a previous state.
            trap PreserveCloneDir EXIT
            Manage_Configs "${@}"
        ;;
        config) #? Use the control list to Manage Dots : '~/.config/hyprdots-ctl/manage_cfg.lst'
            Manage_Configs "$1"
            rename_backup "_Hyprdots_restore_config"
        ;;
        link) #? Links a Clone Directory. Useful if you want to change your CloneDir
            shift ; [[ -z "${1}" ]] && echo "Missing /path/to/CloneDir/*.: ${1}" && exit 1     
            new_CloneDir=${1}  
            [[ ! -d ${new_CloneDir} ]] && { print_prompt -r "INVALID:" -w "${new_CloneDir} not a directory" && exit 1 ;}    
            [[ ! -e ${new_CloneDir}/Configs/.config/hypr/scripts/globalcontrol.sh ]] && { print_prompt -r "MISSING:" -w "  ./Configs/.config/hypr/scripts/globalcontrol.sh" && exit 1 ;}
            [[ ! -e ${new_CloneDir}/Scripts/global_fn.sh ]] && { print_prompt -r "MISSING:" -w "./Configs/global_fn.sh " && exit 1 ;}        
            cd "${new_CloneDir}/Scripts" || { print_prompt -r "ERROR:" -w " cd ${new_CloneDir}" && exit 1 ;}    
            ./restore_lnk.sh
            Hyprdots reload
        ;;
        *)  Parameters "$Function"  ;;
  esac
}

backup() { #? Handles Your Back ups. 
            trap PreserveCloneDir EXIT
    case $1 in 
        all) #? Backs up the current configuration.
            Manage_Configs "$1"
            ;;
        # custom)
        #     Manage_Configs "$1"
        # ;;
        revert) #? Revert to a Previous Backup run by 'Hyprdots backup all'.
        barLine
            Manage_Configs "$1"
        barLine
        Hyprdots reload
            ;;
        list) #? List the backup
        Manage_Configs "list_Backup"
        ;;
        clean) #? Clear some Storage by Deleting old backups. 
            Manage_Configs "$1"
        ;;
        *)  Parameters "$Function"  ;;
    esac
}

sync() { #? Apply your Prefered Configuration defined at ~/.config/hyprdots-ctl/hyprdots.conf
if [ $# -eq 0 ]; then
echo "Usage: Hyprdots sync [options]"
Parameters "$Function"
exit 0
        fi
    for arg in "$@"; do
        case $arg in
            waybar_ctl) #? Restore User waybar control file
                User_Sync "$arg"
                ;;
            theme_patch) #? Restore Patched custom themes
                User_Sync "$arg"                
                ;;
            Code) #? Restore $USER Vscode config file
                User_Sync "$arg"
                ;;
            kitty) #? Restore $USER kitty.conf file
                User_Sync "$arg"
                ;;
            kdeglobals)
                User_Sync "$arg"
                ;;
            *)  
            echo "Unknown [option]: $arg "
            echo "Usage: Hyprdots sync [options]"
                Parameters "$Function"
                ;;
        esac
    done
}


theme() { #? Theme Related Actions 
  # Function for managing themes
case $1 in 
        set) #? Set Theme
        sel_Theme=$(cat $ThemeCtl | awk -F'|' '{print $2}' | fzf )
        "$ScrDir"/themeswitch.sh -s "$sel_Theme"
        ;;
        next) #? Next Theme
            "$ScrDir"/themeswitch.sh -n
        ;; 
        prev) #? Previous Theme
            "$ScrDir"/themeswitch.sh -p
        ;;
        select) #? Theme Selector
            "$ScrDir"/themeselect.sh
        ;;
        patch) #? Patch A Theme from different repository.
           shift
            ./themepatcher.sh "$@"
        ;;
        *)  Parameters "$Function"  ;;

esac
}

wallpaper() { #? Wallpaper related Actions
  case $1 in
        set) #? Set /Path/to/Wallpapers as new Wallpaper Directory
            shift
            cd - || exit
            if [[ -z "${*}" ]] ; then echo "Missing /Path/to/Wallpaper: ${*}" ; exit 1 ; fi
            "$ScrDir"/swwwallpaper.sh -s "$1"
        ;;
        next) #? Next Wallppaer
            "$ScrDir"/swwwallpaper.sh -n 
        ;;
        prev) #? Previous Wallpaper
            "$ScrDir"/swwwallpaper.sh -p
        ;;
        select) #? Wallpaper Selector
            "$ScrDir"/swwwallselect.sh
        ;;
        path) #? Current Theme will follow /path/to/wallpaper/* as its wallpaper directory 
                shift ; [[ -z "${1}" ]] && echo "Missing /path/to/wallpaper/*.: ${1}" && exit 1                                  
                ./create_cache.sh -c "$1"*
        ;;
        variety) #? EXPERIMENTAL! Use variety package to manage wallpapers.
            shift
            /usr/lib/hyprdots-ctl/Run_Wallpaper "${@}"
        ;;
        *)  Parameters "$Function"  ;;

esac
}

sddm() { #? Sddm Things
  case $1 in 
        set) #? Set active Wallpaper to Sddm Lockscreen
            "$ScrDir"/sddmwall.sh
        ;;
        *)  Parameters "$Function"  ;;

esac
}

wallbash() { #? Toggle to use wallpaper color as theme color.
  case $1 in 
        toggle) #? Toggle Wall bash On/Off
            "$ScrDir"/wallbashtoggle.sh
        ;;
        term) #? Toogle Terminal colors into some presets (Follows wallpaper accent)
            /usr/lib/hyprdots-ctl/Manage_Wallbash "${@}"
        ;;
        kitty) #? Toogle wallbash for 'kitty'
            /usr/lib/hyprdots-ctl/Manage_Wallbash "${@}"
        ;;
        waybar) #? Toogle wallbash for 'waybar'
            /usr/lib/hyprdots-ctl/Manage_Wallbash "${@}"
        ;;
        spotify) #? Toogle wallbash for 'spotify'
            /usr/lib/hyprdots-ctl/Manage_Wallbash "${@}"
        ;;
        *)  Parameters "$Function"  ;;
esac
}

waybar() { #? Waybar related Things
    case $1 in
        control) #? Edit waybar Control File.
            ACTION="notify-send -a \"Hyprdots\" \"Waybar Updated\" ; "$ScrDir"/wbarconfgen.sh ; killall waybar 2> /dev/null ; $(which waybar) > /dev/null 2>&1 & disown "
            ConfigCtl "$HOME/.config/waybar/config.ctl" "$ACTION"
            ;;
        *)
            Parameters "$Function" 
            ;;
    esac
}

code() { #? Modify Vscode Extensionscode
case $1 in 
         select) #? Selector for default Theme presets

select_theme() {
            dir=$(cat $ThemeCtl | grep "^1|" | cut -d'|' -f3 | cut -d'~' -f1 | tr '[:upper:]' '[:lower:]')
        code_SubExt=$(cat $HOME/.vscode/extensions/"${dir}"*/package.json | jq -r '.contributes.themes[] | .label' | fzf )
        awk -v ext="${code_SubExt}" -F'|' 'BEGIN {OFS = FS} /^1\|/ {if ($3 ~ /~/) sub(/~[^|]*/, "~" ext, $3); else $3 = $3 "~" ext} 1' "$ThemeCtl" > temp && mv temp "$ThemeCtl"
            if [ "$(grep -c "workbench.colorTheme" $ConfDir/Code/User/settings.json)" -eq 1 ] ; then sed -i "/workbench.colorTheme/c\    \"workbench.colorTheme\": \"${code_SubExt}\"," $ConfDir/Code/User/settings.json
            else sed -i "/^{/a\    \"workbench.colorTheme\": \"${code_SubExt}\"," $ConfDir/Code/User/settings.json
            fi
}
if [[ ! -z "$(cat $HOME/.config/hypr/theme.ctl | grep "^1|" | cut -d'|' -f3)" ]]; then select_theme
else echo "No Linked Code Extension found. Would you like to add the extension MANUALLY?"
    ask_confirm ; sel_ext=$(/usr/bin/code --list-extensions | fzf)   
    sed -i '/^1|/ s/[^|]*|[^|]*|[^|]*/&'"$sel_ext"'/' "$ThemeCtl"
     select_theme
fi
         ;;
        *)
        Parameters "$Function" 
         ;;
    esac
}

cache() { #? Cache 
    case $1 in 
      reload) #? Reload Wallpaper Cache.
            shift
            [[ -z ${*} ]] && print_prompt -y "NOTE: Append the 'Theme-Name' to reload specific theme"
             ./create_cache.sh "${@}" 
         ;;
      rebuild) #? Force rebuild cache
            read -n 1 -s -r -p "[ENTER:yes ANY:no] Force Rebuild Cache, Proceed? " key ; [[ -z "$key" ]] || exit 0 
            ./create_cache.sh -f
         ;;
        *)
        Parameters "$Function" 
         ;;
    esac
}

power() { #? Power Options

    case $1 in 
        reset) #? Reset Changes.
            Power_Manager "$@"
        ;;     
        save) #? Save Power by disabling features
            Power_Manager "$@"
         ;;
        unset) #? Unset specific changes
            Power_Manager  "$@"
        ;;
        game) #? Toggle Game mode
            Power_Manager  "$@"
        ;;
        *)Parameters "$Function" 
         ;;
    esac

}

show() { #? Some Hypr GUI you might want to use.
    
    case $1 in 
        monitors) #? Manages Monitors using nwg-displays
            Monitor_Manager
        ;;
        binds) #? Show Keybindings Hints(Click to execute)
            Keybinds_Hint
        ;;
        emoji) #? Show Emojis
            Launch_Emoji
        ;;
        pastebin) #? Show pastebin 
            shift
            Launch_Pastebin "$@"
        ;;
        screencap) #? Experimental! Rofi will conflict. Will use yad in the future
            Launch_Screencap
        ;;
        # panel) #? Notifications Panel
        #     Launch_Swaync
        # ;;
        *)Parameters "$Function" 
         ;;

    esac
}

run() { #? Executables

    case $1 in 
        events) #? Watches hyprland events and executes actions
            Hypr_Events
        ;;
        screencap) #? Screenshot and Screenrecord Tool
            shift
            Run_Screencap "$@"
        ;;
        *)Parameters "$Function" 
         ;;

    esac

}

inject() { #? Some of Scripts you might want to use.

    case $1 in 
      chaotic) #? install Chaotic AUR 
        shift
          sudo /usr/lib/hyprdots-ctl/Install_ChaoticAUR "${@}"
         ;;
        *)
        Parameters "$Function" 
         ;;
    esac

}

reload() { #? Just Reload 
    box_me "Dots reloaded"
    ${ScrDir}/themeswitch.sh -s "$(cat ${ConfDir}/hypr/theme.ctl | grep "^1" | cut -d '|' -f2)" || true
    killall waybar || true
    $(which waybar) > /dev/null 2>&1 &

}






#! +----------------------------------------------------------------|
"$@" #? Call the appropriate Function based on the first argument.  |
#! +----------------------------------------------------------------|
