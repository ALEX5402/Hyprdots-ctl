#!/bin/env bash

if [ "$1" != "--dev" ]; then
    return 0 || exit 0
fi
shift
. Hyde-Parser

# case $1 in

#     set-clone) #? Set a new Clone directory
#         newClone=$3
#         if [ -d "$newClone" ]; then
#             echo "Setting new clone directory!"
#             sed -i "/^CloneDir=/c\CloneDir=\"$newClone\"" "$HOME"/.config/hypr/scripts/globalcontrol.sh
#         else
#             echo "Directory [ $newClone] does not exist"
#             # ; read -t 3
#             # cd $HOME || exit
#             # newClone=$(fzf)
#             # sed -i "/^CloneDir=/c\CloneDir=\"$newClone\"" "$HOME"/.config/hypr/scripts/globalcontrol.sh
#             exit 0
#         fi
#         cd "$newClone/Scripts" || exit
#         ./restore_lnk.sh

#         exit 0
#     ;;
# esac

gen_completion() { #? Generate Shell Completions
    usagePage=$(
        cat <<HEADER
# Autogenerated file '$0 --dev gen_completion'
# This is a file fed to complgen to generate bash/fish/zsh completions
# Repo: https://github.com/adaszko/complgen
# Generate completion scripts: "complgen aot --bash-script Hyde.bash --fish-script Hyde.fish --zsh-script Hyde.zsh ./Hyde.usage"

$(basename $0 ) <FUNCTIONS>
HEADER
        echo "<FUNCTIONS> ::="
        grep -E '^\w+ *\( *\)\s*\{ #\?' $0 | while read -r line; do
            Function=$(echo "$line" | awk 'BEGIN { FS = "[()#?]" } { print $1 }')
            desc=$(echo -ne "$line" | awk 'BEGIN { FS = "[()#?]" } { print $5 }')
            printf "%s %-50s %s" "\n\t\t| " "(${Function} <${Function^^}_FUNCTION> ) " "\"${desc}\""
        done
        echo -e ';\n\n'

        grep -E '^\w+ *\( *\)\s*\{ #\?' $0 | while read -r line; do
            local Function=$(echo "$line" | awk 'BEGIN { FS = "[()#?]" } { print $1 }')
            if awk "/^$Function\(\) \{/,/}/" "$0" | grep >/dev/null 'case'; then
                local caps_func=$Function
                echo "<${caps_func^^}_FUNCTION> ::="
                local pipe=""
                awk "/^$Function\(\) \{/,/esac;/" "$0" | grep -E '^\s+\w+\)' | while read -r argline; do
                    local arg="$(echo "${argline}" | awk -F ')' '{print $1}')"
                    local description="$(echo -ne "${argline}" | awk -F '?' '{print $2}' | grep -m 1 "" | tr -d '\n')"
                    params=""
                    if echo "${description}" | grep -q "[*]"; then
                        params=" <${caps_func^^}_${arg^^}_USAGE> "
                    fi
                    echo -e "\t\t\t $pipe (${arg}${params}) \t  \"$description\""
                    pipe="|"
                done
                echo -e ';\n\n'
            fi
        done
                grep '_USAGE]' "${0}" | sed -e 's/\[//g' -e 's/\]//g' -e 's/ *//g' | while read -r line; do
                echo "<${line}> ::="
                parse_section ${line} $0  | while read -r line;do
                local func=$(echo "$line" | awk -F '?' '{print $1}' )
                local desc=$(echo "$line" | awk -F '?' '{print $2}' )
                echo "$pipe ($func) \"$desc\""
                pipe="|"
                done
                echo -e ";\n"
                done 
    )
    echo -e "${usagePage}" |
        sed -e "s|\${CloneDir}|$CloneDir|g" \
            -e "s|\${HOME}|${HOME}|g" \
            -e "s|\${hydeConfDir}|${hydeConfDir}|g" \
            -e "s|\${ctlFile}|$ctlFile|g"

    exit 0
}

patch_PR() {
        navigate_clone
        pull_request=$(curl -s https://api.github.com/repos/prasanthrangan/hyprdots/pulls | jq -r '.[] | "\(.number) \(.title)"' | fzf)
        [ -z "$pull_request" ] && print_prompt -r "Operation Cancelled" && exit 1
        IFS=' ' read -ra parts <<< "$pull_request"
        number="${parts[0]}"
        branchname=$(printf "%s" "${parts[@]:1}" | sed -e 's/[^a-zA-Z0-9_-]//g')
        echo -e "\n$number $branchname"
        # Delete the local branch if it exists
        if git rev-parse --verify "${branchname}" &>/dev/null; then
            # Attempt to delete the branch
            git branch -D "${branchname}" || {
                # If deletion fails, switch to main and then delete the branch
                git switch main
                git branch -D "${branchname}"
            }
        fi
        
        if git fetch origin pull/${number}/head:${branchname}; then
            git switch "${branchname}" || git checkout -b "${branchname}"
            # git pull origin "${branchname}"
        else
            echo "Failed to fetch pull request $number."
        fi
        exit 1
}

term_colors() {
# Iterate through the color codes from 0 to 255
for color in $(seq 0 255); do
    # Use ANSI escape codes to set the text color and reset it after printing
    # Format the output with tabs for alignment
    printf "\e[38;5;%sm %3d |\e[0m" $color $color
done
exit 0
}

OPT=(
"Pull Request  ? Useful if you want to Test/Patch PRs  ? patch_PR "
"Generate completion ? Click me to generate shell completion ? gen_completion "
"Real Terminal Colors ? Show real 256 colors in terminal ?term_colors"
)


case $1 in
gen_completion) #? Generate Shell Completions
    gen_completion
    exit 0    
    ;;
patch_PR)
    pacth_PR Patch a PR
    ;;
*)
    echo -e "\033[35mYou are on development mode, I assume you know what you are doing.\033[0m"
    read -n 1 -s -r -p "[ENTER:yes ANY:no] Proceed? " key
    [[ -z "$key" ]] || exit 0
    select_exec "${OPT[@]}"
    ;;
esac
