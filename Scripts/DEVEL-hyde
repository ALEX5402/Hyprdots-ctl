#!/bin/env bash

if [ "$1" != "--dev" ]; then
    return 0 || exit 0
fi
shift
. Hyde-Parser

# case $1 in

#     set-clone) #? Set a new Clone directory
#         newClone=$3
#         if [ -d "$newClone" ]; then
#             echo "Setting new clone directory!"
#             sed -i "/^CloneDir=/c\CloneDir=\"$newClone\"" "$HOME"/.config/hypr/scripts/globalcontrol.sh
#         else
#             echo "Directory [ $newClone] does not exist"
#             # ; read -t 3
#             # cd $HOME || exit
#             # newClone=$(fzf)
#             # sed -i "/^CloneDir=/c\CloneDir=\"$newClone\"" "$HOME"/.config/hypr/scripts/globalcontrol.sh
#             exit 0
#         fi
#         cd "$newClone/Scripts" || exit
#         ./restore_lnk.sh

#         exit 0
#     ;;
# esac

gen_completion() { #? Generate Shell Completions
    manPage=$(
        cat <<HEADER
# Autogenerated file 'Hyde --dev gen_completion'
# This is a file fed to complgen to generate bash/fish/zsh completions
# Repo: https://github.com/adaszko/complgen
# Generate completion scripts: "complgen aot --bash-script Hyde.bash --fish-script Hyde.fish --zsh-script Hyde.zsh ./Hyde.usage"

Hyde <COMMANDS>
HEADER
        echo "<COMMANDS> ::="
        grep -E '^\w+ *\( *\)\s*\{ #\?' $0 | while read -r line; do
            Function=$(echo "$line" | awk 'BEGIN { FS = "[()#?]" } { print $1 }')
            desc=$(echo -ne "$line" | awk 'BEGIN { FS = "[()#?]" } { print $5 }')
            printf "%s %-50s %s" "\n\t\t| " "(${Function} <${Function^^}_FUNCTION> ) " "\"${desc}\""
        done
        echo -e ';\n\n'

        grep -E '^\w+ *\( *\)\s*\{ #\?' $0 | while read -r line; do
            local Function=$(echo "$line" | awk 'BEGIN { FS = "[()#?]" } { print $1 }')
            if awk "/^$Function\(\) \{/,/}/" "$0" | grep >/dev/null 'case'; then
                local caps_func=$Function
                echo "<${caps_func^^}_FUNCTION> ::="
                local pipe=""
                awk "/^$Function\(\) \{/,/esac;/" "$0" | grep -E '^\s+\w+\)' | while read -r argline; do
                    local arg="$(echo "${argline}" | awk -F ')' '{print $1}')"
                    local description="$(echo -ne "${argline}" | awk -F '?' '{print $2}' | grep -m 1 "" | tr -d '\n')"
                    params=""
                    if echo "${description}" | grep -q "[*]"; then
                        params=" <${caps_func^^}_${arg^^}_USAGE> "
                    fi
                    echo -e "\t\t\t $pipe (${arg}${params}) \t  \"$description\""
                    pipe="|"
                done
                echo -e ';\n\n'
            fi
        done
                grep '_USAGE]' "${0}" | sed -e 's/\[//g' -e 's/\]//g' -e 's/ *//g' | while read -r line; do
                echo "<${line}> ::="
                parse_section ${line} $0  | while read -r line;do
                local func=$(echo "$line" | awk -F '?' '{print $1}' )
                local desc=$(echo "$line" | awk -F '?' '{print $2}' )
                echo "$pipe ($func) \"$desc\""
                pipe="|"
                done
                echo -e ";\n"
                done 
    )
    echo -e "${manPage}" |
        sed -e "s|\${CloneDir}|$CloneDir|g" \
            -e "s|\${HOME}|${HOME}|g" \
            -e "s|\${hydeConfDir}|${hydeConfDir}|g" \
            -e "s|\${ctlFile}|$ctlFile|g"

    exit 0
}

OPT=(
    "Generate completion ? Click me to generate shell completion ? gen_completion"
)

case $1 in
gen_completion) #? Generate Shell Completions
    gen_completion
    exit 0
    ;;
*)
    echo -e "\033[35mYou are on development mode, I assume you know what you are doing.\033[0m"
    read -n 1 -s -r -p "[ENTER:yes ANY:no] Proceed? " key
    [[ -z "$key" ]] || exit 0
    select_exec "${OPT[*]}"
    ;;
esac
