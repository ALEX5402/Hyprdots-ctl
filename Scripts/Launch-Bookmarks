#!/bin/bash
#  ____              _                         _
# | __ )  ___   ___ | | ___ __ ___   __ _ _ __| | _____
# |  _ \ / _ \ / _ \| |/ / '_ ` _ \ / _` | '__| |/ / __|
# | |_) | (_) | (_) |   <| | | | | | (_| | |  |   <\__ \
# |____/ \___/ \___/|_|\_\_| |_| |_|\__,_|_|  |_|\_\___/
#
# -----------------------------------------------------

#? This scripts iterates to all known bookmarks path
# TODO accepts feature Request for other browser Bookmarks (json format only)

rofi_pos
recentData="${cacheDir}/landing/show_bookmarks.recent"
[ ! -f "${recentData}" ] && touch "${recentData}"

# create a backup file
create_backup() {
    if [ "$#" -eq 2 ] && [ -n "$1" ] && [ -n "$2" ]; then
        if [ ! -f "$2" ] || [ "$1" -nt "$2" ]; then
            cp "$1" "$2"
        fi
    fi
}

# process bookmarks
process_bookmarks() {
    query="select b.title, p.url, b.id, SUBSTR(SUBSTR(p.url, INSTR(url, '//') + 2), 0, INSTR(SUBSTR(p.url, INSTR(p.url, '//') + 2), '/')) as domain from moz_bookmarks as b left outer join moz_places as p on b.fk=p.id where b.type = 1 and p.hidden=0 and b.title not null" #  and parent=$1
    $sqlite_path $sqlite_params "$places_backup" "$query" | while IFS=^ read title url id domain; do
        if [ -z "$title" ]; then
            title="$url"
        fi
        echo "{\"title\": \"$title\", \"url\": \"$url\"}" | jq .
    done
}

firefox_bookmarks() {
    # Source: https://github.com/milosz/rofi-firefox-bookmarks
    # Modified: khing
    check_package sqlite3
    # places_file="${1:-(find $HOME/.mozilla/firefox/*.default*/ -name "places.sqlite" -print -quit)}"
    places_file="${1}"
    places_backup="$(dirname "${places_file}")/places.rofi.sqlite"
    sqlite_path="$(which sqlite3)"
    sqlite_params="-separator ^"
    create_backup "$places_file" "$places_backup"
    process_bookmarks
}

#? Receives a filepath of any .lst format converts to json
# TODO make this to handle multiple slots for multi objects
custom_bookmarks() {
    awk -F '|' '{gsub(/^ */, "", $1); gsub(/ *$/, "", $1); gsub(/^ */, "", $2); gsub(/ *$/, "", $2); print "{\"title\":\""$1"\",\"url\":\""$2"\"}"}' "${1}"
}

save_recent() {
    recentNumber=5
    #? Prepend the selected glyph to the top of the recentData file
    # sed -i "1i\\$selGlyph" "${recentData}"
    awk -v var="${*}" 'BEGIN{print var} {print}' "${recentData}" >temp && mv temp "${recentData}"
    #?  Use awk to remove duplicates and empty lines, moving the most recent glyph to the top
    awk 'NF' "${recentData}" | awk '!seen[$0]++' | head -n ${recentNumber} >temp && mv temp "${recentData}"
}

declare -a bookmarkFile

# TODO List all the posible Bookmarks path if needed to be hardcoded
bookmarkFile+=(
    #* Examples
    # "${confDir}/BraveSoftware/Brave-Browser/Default/Bookmarks"
    # "${confDir}/thorium/Default/Bookmarks"
)
#* parse vars inside ./hyde.conf
bookmarkFile+=(${bookmark_file[@]})

#* Cache bookmark path
if [[ "${*}" == *"--rebuild"* ]] || [ ! -f "${HYDE_RUNTIME_DIR}/bookmarkFileArray" ]; then
    print_prompt -y "[cache] " "bookmark paths"
    : >"${HYDE_RUNTIME_DIR}/bookmarkFileArray"
    for bookmark in "${bookmark_file[@]}"; do
        echo -e "bookmarkFile+=($bookmark)" >>"${HYDE_RUNTIME_DIR}/bookmarkFileArray"
    done
    eval "$(find "${HOME}/." -type f \( -name "places.sqlite" -o -path "*/Default/Bookmarks" \) -print0 |
        xargs -0 -P 4 printf 'bookmarkFile+=(%q)\n' >>"${HYDE_RUNTIME_DIR}/bookmarkFileArray")"
fi

. "${HYDE_RUNTIME_DIR}/bookmarkFileArray"

#* Construct the main Json
mainJson=$(
    for file in "${bookmarkFile[@]}"; do
        [ ! -f "${file}" ] && continue
        #* firefox
        if grep -q ".sqlite" <<<"${file}"; then
            #! deprecated # lz4jsoncat $file | jq -r '.." | select(type!= "null") |.children[].children[] | select(.type=="text/x-moz-place") | { title:.title, url:.uri }' 2> /dev/null
            firefox_bookmarks "${file}"
        else
            #* User
            if jq -r '.roots.bookmark_bar.children[] | { title:.name, url:.url }' $file 2>/dev/null; then
                jq -r '.roots.bookmark_bar.children[] | { title:.name, url:.url }' $file
            fi
            #* Guest
            if jq -r '.roots.other.children[] | { title:.name, url:.url }' $file 2>/dev/null; then
                jq -r '.roots.other.children[] | { title:.name, url:.url }' $file
            fi
            #* Custom from hyde.conf
            if grep -q ".lst" <<<"${file}"; then
                [[ "${*}" == *"--no-custom"* ]] || custom_bookmarks "${file}"
            fi
        fi
    done
)

[[ -z ${mainJson} ]] && print_prompt -r "[error]" " No/invalid bookmarks detected" && exit 1
jq empty <<<${mainJson} || { print_prompt -r "[fatal]" " Broken json data, be sure to have a valid 'bookmarks.lst' file." "\nrun with '--no-custom' flag" && exit 1; }

#* sort and remove duplicates and append recent
mainJson=$(
    (
        [[ "${*}" == *"--no-custom"* ]] || { [ -f ${recentData} ] && custom_bookmarks "${recentData}"; }
        jq -s 'unique_by(.title) | unique_by(.url) | sort_by(.title) | .[]' <<<$mainJson
    ) | jq -s
)

listView=$(jq -r 'foreach .[] as $item (0; . + 1; "\(.)) \($item.title)")' <<<"$mainJson")

#* Rofi
browser_name=$(basename $(xdg-settings get default-web-browser) .desktop)
r_width="width: ${bookmark_width:-35em};"
r_height="height: ${bookmark_height:-35em};"
r_listview="listview { lines: ${bookmark_line:-13}; }"
r_override="window {$r_height $r_width border: ${hypr_width}px; border-radius: ${wind_border}px;} entry {border-radius: ${elem_border}px;} element {border-radius: ${elem_border}px;} ${r_listview} "

selected_opt=$(rofi -dmenu -i -theme-str "entry { placeholder: \"Launch in ${browser_name}... \";}" -theme-str "${r_override}" -theme-str "${fnt_override}" -config "${roFile}" <<<"${listView}")

[[ -z ${selected_opt} ]] && print_prompt -r "Operation Cancelled" && exit 0

index=$(cut -d ')' -f1 <<<${selected_opt})
save_recent "$(jq -c --argjson index "$index" -cr '.[$index - 1] | "\(.title) |\(.url)"' <<<$mainJson)"

#* Use index and open url
url=$(jq -c --argjson index "$index" -cr ' .[$index - 1] | .url' <<<$mainJson)
xdg-open "${url}" || notify-send "Cannot accessing '$url'"
