#!/bin/bash
#  ____              _                         _
# | __ )  ___   ___ | | ___ __ ___   __ _ _ __| | _____
# |  _ \ / _ \ / _ \| |/ / '_ ` _ \ / _` | '__| |/ / __|
# | |_) | (_) | (_) |   <| | | | | | (_| | |  |   <\__ \
# |____/ \___/ \___/|_|\_\_| |_| |_|\__,_|_|  |_|\_\___/
#
# -----------------------------------------------------

#? This scripts iterates to all known bookmarks path
# TODO accepts feature Request for other browser Bookmarks (json format only)

rofi_pos

declare -a bookmarkFile

# TODO List all the posible Bookmarks path if needed to be hardcoded
bookmarkFile+=(
    #* Examples
    # "${confDir}/BraveSoftware/Brave-Browser/Default/Bookmarks"
    # "${confDir}/thorium/Default/Bookmarks"
)
#* parse vars inside ./hyde.conf
bookmarkFile+=(${bookmark_file[@]})

#* Cache bookmark path
if [[  "${*}" == *"--reset"* ]] || [ ! -f "${HYDE_RUNTIME_DIR}/bookmarkFileArray" ]  ;then
    print_prompt -y "[cache] " "bookmark paths"
    eval "$(find "${HOME}/." -type f \( -name "places.sqlite" -o -path "*/Default/Bookmarks" \) -print0 | 
    xargs -0 -P 4 printf 'bookmarkFile+=(%q)\n' > "${HYDE_RUNTIME_DIR}/bookmarkFileArray"    )"
fi

. "${HYDE_RUNTIME_DIR}/bookmarkFileArray"

#* Construct the main Json
mainJson=$(
    for file in "${bookmarkFile[@]}"; do
        [ ! -f "${file}" ] && continue
        #* firefox
        if grep -q ".sqlite" <<<"${file}"; then
            #! deprecated
            # lz4jsoncat $file | jq -r '.." | select(type!= "null") |.children[].children[] | select(.type=="text/x-moz-place") | { title:.title, url:.uri }' 2> /dev/null
            firefox_bookmark.sh "${file}"
        else
            #* User
            if jq -r '.roots.bookmark_bar.children[] | { title:.name, url:.url }' $file 2>/dev/null; then
                jq -r '.roots.bookmark_bar.children[] | { title:.name, url:.url }' $file
            fi
            #* Guest
            if jq -r '.roots.other.children[] | { title:.name, url:.url }' $file 2>/dev/null; then
                jq -r '.roots.other.children[] | { title:.name, url:.url }' $file
            fi
        fi
    done
)

[[ -z ${mainJson} ]] && print_prompt -r "[error]" " No/invalid bookmarks detected" && exit 1

#* sort and undupe
mainJson=$(jq -s 'unique_by(.title) | unique_by(.url) | sort_by(.title)' <<<$mainJson)

#* Rofi
browser_name=$(basename $(xdg-settings get default-web-browser) .desktop)
r_width="width: ${bookmark_width:-35em};"
r_height="height: ${bookmark_height:-35em};"
r_listview="listview { lines: ${bookmark_line:-13}; }"
r_override="window {$r_height $r_width border: ${hypr_width}px; border-radius: ${wind_border}px;} entry {border-radius: ${elem_border}px;} element {border-radius: ${elem_border}px;} ${r_listview} "

selected_opt=$(jq -r 'foreach .[] as $item (0; . + 1; "\(.)) \($item.title)")' <<<"$mainJson" |
    rofi -dmenu -i -theme-str "entry { placeholder: \"Launch in ${browser_name}... \";}" -theme-str "${r_override}" -theme-str "${fnt_override}" -config "${roFile}")

[[ -z ${selected_opt} ]] && print_prompt -r "Operation Cancelled" && exit 0

index=$(cut -d ')' -f1 <<<${selected_opt})

#* Use index and open url
url=$(jq -c --argjson index "$index" -cr ' .[$index - 1] | .url' <<<$mainJson)
xdg-open $url
