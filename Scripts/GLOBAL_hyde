#! /bin/env bash

# Function to execute a command with elevated privileges
SUPER() {
    local command="$*"
    print_prompt -y "[ROOT] " "${command}"
    if command -v doas >/dev/null 2>&1 && [ -f /etc/doas.conf ] ; then
        doas sh -c "$command"
    else
        sudo sh -c "$command"
    fi
}

export -f SUPER

barLine() { printf '=%.0s' $(seq 3 "$(tput cols)"); echo; }

print_prompt() {
    while (( "$#" )); do
        case "$1" in
            -r) echo -ne "\e[31m$2\e[0m"; shift 2 ;; # Red
            -g) echo -ne "\e[32m$2\e[0m"; shift 2 ;; # Green
            -y) echo -ne "\e[33m$2\e[0m"; shift 2 ;; # Yellow
            -b) echo -ne "\e[34m$2\e[0m"; shift 2 ;; # Blue
            -m) echo -ne "\e[35m$2\e[0m"; shift 2 ;; # Magenta
            -c) echo -ne "\e[36m$2\e[0m"; shift 2 ;; # Cyan
            -w) echo -ne "\e[37m$2\e[0m"; shift 2 ;; # White
            -n) echo -ne "\e[96m$2\e[0m"; shift 2 ;; # Neon
            *) echo -ne "$1"; shift ;;
        esac
    done
    echo ""
}

box_me() {
    local sender="Hyde-cli: "
    local color=3
    
    while (( "$#" )); do
        case "$1" in
            -s)
                sender="$2"
                shift 2
            ;;
            -c)
                color="$2"
                shift 2
            ;;
            *)
                break
            ;;
        esac
    done
    
    local s="${sender}$*"
    tput setaf ${color}
    echo -e " ═${s//?/═}"
    echo -e "║$s ║"
    echo -e " ═${s//?/═}"
    tput sgr0
}

ask_confirm() {
    local key=$1
    if [[ "$key" == "Yy"  ]]; then
        while true; do
            read -n 1 -s -r -p "$(print_prompt -n "[y] " -w "yes (default) " -m "[n] " -w "no:\n")" key
            [[ -z "$key" ]] && key=y
            if [[ "$key" == "y" ]] || [[ "$key" == "Y" ]]; then
                return 0
                elif [[ "$key" == "n" ]] || [[ "$key" == "N" ]]; then
                return 1
            else
                echo "[Y]es or [N]o?"
            fi
        done
    else
        while true; do
            if [ -z "$key" ]; then
                read -n 1 -s -r -p "$(print_prompt -y "[ENTER] " -w "continue " -m "[ANY] " -w " Exit:\n")" key ; [[ -z "$key" ]] && break || exit 0
            else
                read -p "Please type '$(print_prompt -m "$key")' to continue: " answer
                if [[ "$answer" == "$key" ]]; then
                    break
                else
                    print_prompt -r "Invalid input, please try again."
                fi
            fi
        done
    fi
}

handle_error() {
cat << HANDLE_ERROR
$(print_prompt -r "${*}")
=======================================================================================
Please run:
           'Hyde-install'                                 Install Hyde (default)
For advanced usage see options below
        -l|--link                                                Flag to transfer the link to a Clone Directory
                                                                    ﯦ This is useful if you already have a Hyde
                                                                    Default: 'false'
        -d|--dir ~/custom/Hyde/directory                      Clone Hyde in a Custom path then run installation.
                                                                Default: '${cacheCtl}/Hyde'
        -g|--git https://gitclone/link/                          Upstream repository link to be cloned
                                                                Default: 'https://github.com/prasanthrangan/hyprdots'
[ TIP] Looks like you already have a clone directory somewhere
      To reuse that clone directory run 'Hyde-install -d ${HOME}/custom/Hyde/directory --link'
      Then 'Hyde-cli' will remember this directory

HANDLE_ERROR
    exit 1
}

check_Ping() {
    if ! ping -q -c 1 -W 1 8.8.8.8 >/dev/null; then
        box_me "Error: No internet connection."
        exit 1
    fi
}

set_branch() {
    check_Ping
    print_prompt -w "Fetching Upstream"
    if ! git config --get-regexp 'remote.origin.fetch' | grep -q 'refs/heads/\*:refs/remotes/origin/\*'; then
        git remote set-branches origin '*'
    fi
    git fetch --all
    git_branch=$(git branch -a | fzf --prompt='Choose a branch')
    [[ -z ${git_branch} ]] && print_prompt -r "Operation Cancelled" && exit 0
    if [[ $git_branch == *"*"* ]]; then
    export current_branch="${git_branch//\* /}"
        print_prompt -y "Already in branch: ${current_branch}"
        return 1
    else
        # Extract the branch name without the remote prefix and trim leading whitespace
    export current_branch=$(echo "${git_branch}" | sed 's/.*\///' | sed 's/^[[:space:]]*//')
        # Switch to the selected branch
        git checkout "${current_branch}"
        echo "On branch: ${current_branch}"
    fi
}

repo_info() {
  [[ $* != *"--local"* ]] && 

    navigate_clone
    print_prompt -g "CloneDirectory: " -n "${CloneDir}"
    print_prompt -g "Git URL: " -n "${git_url}"
    print_prompt -g "Git Branch: " -n "${current_branch}"
    print_prompt -g "Hyde version: " -n "${hyde_version}"
    print_prompt -g "Modified: " -n "${modify_date}"
    print_prompt -g "Commit message: " -n "${commit_message}"
}

# shellcheck disable=SC2120
navigate_clone() {
    if ! source "${meta_file}"; then
        handle_error "Sourcing ${meta_file} failed.\nIt's possible you didn't install this with the hyde-cli.\n Don't worry, you can still manage Hyde configuration below."
    fi
    export CloneDir
    export ScriptDir="${CloneDir}/Scripts"
    cd $ScriptDir || handle_error "Cannot Change Directory to $ScriptDir"
    current_branch=$(git branch --show-current)
    git_url=$( git remote get-url origin)
    # check changes on the restore lst
}

set_metadata() {
    print_prompt -y "Setting metadata"
    CloneDir=${1:-${CloneDir}}
    export CloneDir 
    export ScriptDir="${CloneDir}/Scripts"
    cd $ScriptDir || handle_error "Cannot Change Directory to $ScriptDir"
    current_branch=$(git branch --show-current)
    git_url=$(git remote get-url origin)
    # check changes on the restore lst
    restore_cfg_hash="$(md5sum $ScriptDir/restore_cfg.lst | cut -d' ' -f1 )"
    hyde_version="$(printf "%s" "$(git describe --tags --always --long | sed 's/\([^-]*-\)g/r\1/;s/-/./g')")"
    modify_date="$(git log -1 --pretty=format:" %cd")"
    commit_message="$(git show -s --format='%B')"
touch "${meta_file}"
cat << METADATA > "${meta_file}"
#? This is a meta file generated for hyde-cli
#! Do not touch this
export CloneDir="$CloneDir"
export current_branch="${current_branch}"
export git_url="${git_url}"
export restore_cfg_hash="${restore_cfg_hash}"
export hyde_version="${hyde_version}"
export modify_date="${modify_date}"
export commit_message="${commit_message}"
METADATA
}

pkg_installed()
{
    local PkgIn=$1
    
    if pacman -Qi $PkgIn &> /dev/null
    then
        #echo "${PkgIn} is already installed..."
        return 0
    else
        #echo "${PkgIn} is not installed..."
        return 1
    fi
}

CHECK () {
    local Pkg_Dep=$(for PkgIn in "$@"; do ! pkg_installed $PkgIn && echo "$PkgIn"; done)
    
    if [[ -n "${Pkg_Dep}" ]]; then echo -e "$0 Dependencies:\n$Pkg_Dep"
        notify-send -a "${0}" "Confirm to install Dependencies: '${Pkg_Dep}'"
        get_aurhlpr
        { pkexec --user "${USER}" env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY "${aurhlpr}" -S $Pkg_Dep --noconfirm && notify-send "Installed: ${Pkg_Dep}" ; } || { notify-send "Operation Cancelled" && exit 1; }
    fi
}


package_check () {
    local Pkg_Dep=$(for PkgIn in "$@"; do ! pkg_installed $PkgIn && echo "$PkgIn"; done)
if [[ -n "${Pkg_Dep}" ]]; then echo -e "$0 Dependencies:\n$Pkg_Dep"
    get_aurhlpr
    if [ -n "${DISPLAY}" ]; then
            notify-send -a "${0}" "Confirm to install Dependencies: '${Pkg_Dep}'"
            { pkexec --user "${USER}" env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY "${aurhlpr}" -S $Pkg_Dep --noconfirm && notify-send "Installed: ${Pkg_Dep}" ; } || { notify-send "Operation Cancelled" && exit 1; }
    else
            print_prompt -y "Confirm to install Dependencies: '${Pkg_Dep}'"
            { "${aurhlpr}" -S $Pkg_Dep --noconfirm && print_prompt -y "Installed: ${Pkg_Dep}" ; } || { print_prompt -r "Operation Cancelled" && exit 1; }
    fi

fi
}

integrity_check() {
    # CheckDir="${1:-${CloneDir}}"
    # #! Requirements
    # config=(
    #     ".local/share/bin/globalcontrol.sh"
    #     ".config/hyde/themes/*/kvantum/kvantum.theme"
    #     ".config/hyde/themes/*/kvantum/kvconfig.theme"
    #     ".config/hyde/themes/*/kitty.theme"
    #     ".config/hyde/themes/*/rofi.theme"
    #     ".config/hyde/themes/*/waybar.theme"
    #     ".config/hyde/themes/*/hypr.theme"
    #     ".config/hyde/themes/*/wallpapers"
    # )
    
    # exit_flag=false
    # for fchk in "${config[@]}" ; do
    #     # Use find to search for files matching the pattern
    #     file=$(find "${CheckDir}/Configs" -path "*${fchk}*" -print -quit)
    #     if [[ -z "${file}" ]]; then
    #         print_prompt -r "[ERROR] " -w "${fchk} --> does not exist in ${CheckDir}/Configs/"
    #         exit_flag=true
    #     fi
    # done
    
    # [[ "$exit_flag" = true ]] && echo "Exiting script due to missing files." && exit 1
    :
}

service_check() {
    for servChk in "$@"; do
        if [[ $(systemctl list-units --all -t service --full --no-legend "${servChk}.service" | sed 's/^\s*//g' | cut -f1 -d' ') == "${servChk}.service" ]]; then
            echo -e "\033[0;33m[SKIP]\033[0m ${servChk} service is active..."
        else
            echo -e "\033[0;32m[systemctl]\033[0m starting ${servChk} system service..."
            systemctl enable --now "${servChk}.service"
            systemctl enable --now "${servChk}.service"
        fi
    done
}

do_contain() {
    local etc_file="$1"
    local conf_file="$2"
    local tag_line=$(grep -i "Hyde-cli tag:" "${etc_file}")
    
    if [[ ! -f "${conf_file}" ]] || grep -qF "${tag_line}" "${conf_file}" ; then
        cp "${etc_file}" "${conf_file}"
        echo "Copied $etc_file to ${conf_file} because it contained '${tag_line}'"
    else :
        # echo "Did not copy ${etc_file} to ${conf_file} because it did not contain '${tag_line}'"
        print_prompt -r "Warning:" -m "File was changed: ${conf_file}" -w "\n Delete file to recieve updates"
    fi
}



case_help() {
    OPTION="$1"
    sed -n "/case \${$OPTION} in/,/esac/p" "${0}" | grep '#?' | awk -F') #?' '{gsub(/ #?/, "", $1); gsub(/?/, "", $2); printf "%-30s %s\n", $1, $2}'
}

eval "$(declare -F | sed -e 's/-f /-fx /')"


# PATH
export libDir=/usr/lib/hyde-cli
export PATH=${PATH}:${libDir}

# CONFIGS
export etcDir="/etc/hyde-cli"

# Config
export ConfDir="${XDG_CONFIG_HOME:-$HOME/.config}"
export ctlDir="${ConfDir}/hyde"
export hydeDir="${ConfDir}/hyde"
export BkpDir="${ConfDir}/cfg_backups"
export wallbashDir="${hydeDir}/wallbash"
export themeDir="${hydeDir}/themes"

# Cache-dir
export cacheCtl="${HOME}/.cache/hyde"
export meta_file="${cacheCtl}/hyde.meta"

#! Temporary
[ -e "${HOME}/.cache/hyde-cli/hyde.meta" ] && mv "${HOME}/.cache/hyde-cli/hyde.meta" "${meta_file}"

install_packages_list="/tmp/hyde-ctl-$(id -u)-temporary-apps"
export install_packages_list
export ctlFile="${cacheCtl}/manage_cfg.lst" #! Will use cacheDir
config_override="/tmp/Hyde-${UID}-BAK$(basename "${ctlFile}")"
export config_override

scrDir=""$(dirname $(which globalcontrol.sh 2> /dev/null ) 2> /dev/null )""
[ ! -e "${scrDir}/globalcontrol.sh" ] && export scrDir="$HOME/.local/share/bin/"
[ ! -e "${scrDir}/globalcontrol.sh" ] && [[ ${is_fresh_install} != true ]] && handle_error "Scripts for HyDE not detected at ${scrDir}"

export scrDir
[[ ${is_fresh_install} != true ]] && . $scrDir/globalcontrol.sh

#TODO Source the metadata here

make_dir=(
    "${BkpDir}"
    "${cacheDir}"
    "${cacheCtl}"
    "${etcDir}"
    "${ctlDir}"
)
for dir in "${make_dir[@]}"; do
    if [[ ! -d "${dir}" ]] && [[ -n "${dir}" ]]; then
        mkdir -p "${dir}"
        echo "Hyde-cli created a directory: ${dir}"
    fi
done

if [ "$(ls -A "$BkpDir")" ]; then
    last_bak=$(ls -td -- $BkpDir/* | head -n 1 )
fi
export last_bak
