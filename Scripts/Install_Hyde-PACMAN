#! /bin/env bash

libDir=/usr/lib/hyde-cli
# export PATH="$libDir:$PATH"

readonly CloneDir=${1}
export GIT=${2}

if [ "${fresh}" = true ]; then
    
    clear
    cat <<GREET
WOW an Arch BTW User!
${barLine}

$(tput setaf 2)Hello ${USER}! This is an automated installation for Hyde.$(tput sgr0)

Hyde-cli is an active helper for Hyde. During this installation, the script will:
1. Check if Hyde is already installed.
2. If not, it will clone the Hyde repository from GitHub. https://github.com/prasanthrangan/hyde
3. Optionally, you can add Chaotic AUR to your mirror list for faster package installation.
4. Finally, it will clone the Hyde repository and run the installation script.

From here on 'Dots' 'Dot Files' means Configurations.

$(tput setaf 3)Hyde-cli is a CLI for Hyde.This aims to add patches
for Hyde and address common Dots issues.
Also this is a USER specific helper, includes a control file for a user to preserve the USER preferences.
Please note that using these scripts may alter your Dot files.$(tput sgr0)

$(tput setaf 6)And wait, there's more!!! Checkout 'Hyde man' to see how you can manage your Hyde setup.$(tput sgr0)

HAVE A GOOD DAY!

Visit: https://github.com/kRHYME7/Hyde-cli for more information.
${barLine}

Clone Directory: ${CloneDir}
Git Repository: ${GIT}

GREET
    
    ask_confirm
    git clone --depth 1 "${GIT}" "${CloneDir}"
    
fi

if ! grep -q "chaotic-mirrorlist" /etc/pacman.conf ; then
    sudo ${libDir}/Install_ChaoticAUR --install fresh
fi

cd "${CloneDir}"/Scripts || exit 0
set_branch
integrity_check "${CloneDir}"

echo "Clone Directory: ${CloneDir}"
echo "Git URL: $(git remote get-url origin)"
echo "Git Branch: ${branch}"

custom_apps="${CloneDir}/Scripts/custom_apps.lst"

if [[ -e ${custom_apps} ]]; then
    sed 's/^#//' "${custom_apps}" | fzf --multi --prompt='Optional packages: press [ TAB ] to select. [ ESC ] exit. [ RETURN ] confirm' >"${install_packages_list}"
    echo -e "Optional packages loaded:"
    cat "${install_packages_list}"
fi

export config_override="/tmp/Hyde-${UID}-BAKmanage_cfg.lst"
export ctlFile="${ctlDir}/manage_cfg.lst"
[ -e $ctlFile ] && cp $ctlFile $config_override
[ ! -e $ctlFile ] && Manage_Configs restore_Lister "OVERWRITE"
Manage_Configs list_Marker "${CloneDir}" --custom
ask_confirm "${USER}"
# trap 'rm -f ./install_pkg.lst' EXIT
#  ./install.sh "${install_packages_list}"

#--------------------------------#
# import variables and functions #
#--------------------------------#
scrDir="${CloneDir}/Scripts"
source "${scrDir}/global_fn.sh" || true
if [ $? -ne 0 ]; then
    echo "Error: unable to source global_fn.sh..."
    exit 1
fi
"${scrDir}/install_pre.sh"

#----------------------#
# prepare package list #
#----------------------#
shift $((OPTIND - 1))
cust_pkg=$1
cp "${scrDir}/custom_hypr.lst" "${install_packages_list}"

if [ -f "${cust_pkg}" ] && [ ! -z "${cust_pkg}" ]; then
    cat "${cust_pkg}" >>"${install_packages_list}"
fi

#--------------------------------#
# add nvidia drivers to the list #
#--------------------------------#
if nvidia_detect; then
    cat /usr/lib/modules/*/pkgbase | while read krnl; do
        echo "${krnl}-headers" >>"${install_packages_list}"
    done
    IFS=$' ' read -r -d '' -a nvga < <(lspci -k | grep -E "(VGA|3D)" | grep -i nvidia | awk -F ':' '{print $NF}' | tr -d '[]()' && printf '\0')
    for nvcode in "${nvga[@]}"; do
        awk -F '|' -v nvc="${nvcode}" '{if ($3 == nvc) {split(FILENAME,driver,"/"); print driver[length(driver)],"\nnvidia-utils"}}' "${scrDir}"/.nvidia/nvidia*dkms >>"${install_packages_list}"
    done
fi

echo -e "\033[0;32m[GPU]\033[0m detected // $dGPU"

#----------------#
# get user prefs #
#----------------#
if ! chk_list "aurhlpr" "${aurList[@]}"; then
    echo -e "Available aur helpers:\n[1] yay\n[2] paru"
    prompt_timer 120 "Enter option number"
    
    case "${promptIn}" in
        1) export getAur="yay" ;;
        2) export getAur="paru" ;;
        *)
            echo -e "...Invalid option selected..."
            exit 1
        ;;
    esac
fi

if ! chk_list "myShell" "${shlList[@]}"; then
    echo -e "Select shell:\n[1] zsh\n[2] fish"
    prompt_timer 120 "Enter option number"
    
    case "${promptIn}" in
        1) export myShell="zsh" ;;
        2) export myShell="fish" ;;
        *)
            echo -e "...Invalid option selected..."
            exit 1
        ;;
    esac
    echo "${myShell}" >>"${install_packages_list}"
fi

#--------------------------------#
# install packages from the list #
#--------------------------------#
"${scrDir}/install_pkg.sh" "${install_packages_list}"
rm "${install_packages_list}"

#---------------------------#
# restore my custom configs #
#---------------------------#

# "${scrDir}/restore_fnt.sh"
# "${scrDir}/restore_cfg.sh"
# cat ./restore_cfg.lst
./restore_fnt.sh
Restore_Config --only "/tmp/Hyde-$(id -u)-BAK" ${CloneDir}/Configs

#---------------------#
# post-install script #
#---------------------#

"${scrDir}/install_pst.sh"

#------------------------#
# enable system services #
#------------------------#

while read servChk; do
    
    if [[ $(systemctl list-units --all -t service --full --no-legend "${servChk}.service" | sed 's/^\s*//g' | cut -f1 -d' ') == "${servChk}.service" ]]; then
        echo -e "\033[0;33m[SKIP]\033[0m ${servChk} service is active..."
    else
        echo -e "\033[0;32m[systemctl]\033[0m starting ${servChk} system service..."
        sudo systemctl enable "${servChk}.service"
        sudo systemctl start "${servChk}.service"
    fi
    
done <"${scrDir}/system_ctl.lst"
