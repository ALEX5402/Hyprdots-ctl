#!/bin/bash

export LANGUAGE=en_US 
export LANG=en_US.UTF-8
export PATH=$PATH:/usr/lib/hyprdots-ctl/

handle_error() { echo "Error: $1" ; Install_Hyprdots ; exit 1 ; }

! source $HOME/.config/hypr/scripts/globalcontrol.sh 2> /dev/null && handle_error "Failed to source globalcontrol.sh"
[[ -z "${CloneDir// }" ]] && handle_error "Cannot find Hyprdots Directory"
[ ! -f "$CloneDir/Scripts/global_fn.sh" ] && handle_error "$ConfDir/Scripts/global_fn.sh does not exist"

ScrDir="$ConfDir/hypr/scripts"
ScriptDir="$CloneDir/Scripts"
BkpDir="$ConfDir/cfg_backups"
cacheDir="$HOME/.cache/hyprdots"
cacheCtl="$HOME/.cache/hyprdots-ctl"
etcDir="/etc/hyprdots-ctl"

barLine() { printf '=%.0s' $(seq 1 "$(tput cols)") ; }

make_dir=(
  "$ScrDir"
  "$ScriptDir"
  "$BkpDir"
  "$cacheDir"
  "$cacheCtl"
  "$etcDir"
)
  for dir in "${make_dir[@]}"; do
    if [ ! -d "$dir" ]; then
      mkdir -p "$dir"
      echo "Hyprdots-ctl created a directory: $dir"
    fi
  done

if [ "$(ls -A "$BkpDir")" ]; then
  last_bak=$(ls -td -- $BkpDir/* | head -n 1 )
fi

rename_backup() {
bak=$(ls -td -- "$BkpDir"/* | head -n 1 )
if [[ "$last_bak" != $bak ]]; then
mv "$bak" "$bak-$1"
fi
}


print_prompt() {
  while (( "$#" )); do
    case "$1" in
      -r) echo -ne "\e[31m$2\e[0m" ;;  # Red
      -g) echo -ne "\e[32m$2\e[0m" ;;  # Green
      -y) echo -ne "\e[33m$2\e[0m" ;;  # Yellow
      -b) echo -ne "\e[34m$2\e[0m" ;;  # Blue
      -m) echo -ne "\e[35m$2\e[0m" ;;  # Magenta
      -c) echo -ne "\e[36m$2\e[0m" ;;  # Cyan
      -w) echo -ne "\e[37m$2\e[0m" ;;  # White
      -n) echo -ne "\e[96m$2\e[0m" ;;  # Neon
      *) echo "Invalid option: $1" ;;
    esac
    shift 2
  done
  echo ""
}

box_me() {
  local s="Hyprdots: $*"
  tput setaf 3
  echo " ═${s//?/═}"
  echo "║$s ║"
  echo " ═${s//?/═}"
  tput sgr0
}

ask_confirm() {
  local key=$1
  while true; do
    if [ -z "$key" ]; then
    read -n 1 -s -r -p "[ENTER: continue ANY: exit]" key ; [[ -z "$key" ]] && break || exit 0
    else
      read -p "Please type '$(print_prompt -m "$key")' to continue: " answer 
      if [[ "$answer" == "$key" ]]; then
        break
      else
        print_prompt -r "Invalid input, please try again."
      fi
    fi
  done
}

case_help() {
  OPTION="$1"
  sed -n "/case \${$OPTION} in/,/esac/p" "${0}" | grep '#?' | awk -F') #?' '{gsub(/ #?/, "", $1); gsub(/?/, "", $2); printf "%-30s %s\n", $1, $2}'
}
